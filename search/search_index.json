{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to EasySqlParser EasySqlParser is 2-way-sql parser for .NET. Feature It is easy to use as it only performs parsing. Depends only .NET Standard 2.0. Note EasySqlParser is porting the 2-way-sql parse part of DOMA","title":"Home"},{"location":"#welcome-to-easysqlparser","text":"EasySqlParser is 2-way-sql parser for .NET.","title":"Welcome to EasySqlParser"},{"location":"#feature","text":"It is easy to use as it only performs parsing. Depends only .NET Standard 2.0. Note EasySqlParser is porting the 2-way-sql parse part of DOMA","title":"Feature"},{"location":"config/","text":"Configuration Overview Set by code base at entry point. The items to be set are the following two and both are required. DB connection type Delegate for creating a System.Data.IDbDataParameter instance ConfigContainer.AddDefault( DbConnectionKind.SqlServer, // DB connection type () => new SqlParameter() // Delegate for creating a `System.Data.IDbDataParameter` instance ); WCF As the entry point is hidden in WCF, please be sure to write in the place where Service implementation method etc. are called. DB connection type EasySqlParser supports the following DB connections. DB connection type Description SqlServer DbConnection is System.Data.SqlClient.SqlConnection Microsoft SQL Server 2012 or later SqlServerLegacy DbConnection is System.Data.SqlClient.SqlConnection Microsoft SQL Server 2008 and earlier Oracle DbConnection is Oracle.DataAccess.Client.OracleConnection or Oracle.ManagedDataAccess.Client.OracleConnection Oracle 12c or later OracleLegacy DbConnection is Oracle.DataAccess.Client.OracleConnection or Oracle.ManagedDataAccess.Client.OracleConnection Oracle 11g and ealier DB2 DbConnection is IBM.Data.DB2.DB2Connection AS400 DbConnection is IBM.Data.DB2.iSeries.iDB2Connection MySql DbConnection is MySql.Data.MySqlClient.MySqlConnection PostgreSql DbConnection is Npgsql.NpgsqlConnection SQLite DbConnection is System.Data.SQLite.SQLiteConnection or Microsoft.Data.Sqlite.SqliteConnection Odbc DbConnection is System.Data.Odbc.OdbcConnection OleDb DbConnection is System.Data.Odbc.OleDbConnection Warning Make sure that the delegate for creating the System.Data.IDbDataParameter instance is set according to the DB connection implementation In case of multiple DB connection If you need multiple DB connections such as SQL Server and Oracle, please register additional settings using the AddAditional method ConfigContainer.AddAdditional( DbConnectionKind.Oracle, // DB connection type () => new OracleParameter() // Delegate for creating a `System.Data.IDbDataParameter` instance ); Cache Like DOMA, EasySqlParser has a function to cache the contents of read SQL file. Therefore, if you want to modify only SQL files while the Web application is running, the changes are not reflected because the cache is effective. In such a case, if you allow SqlParser.ClearCache(path/to/sqlfile) to be executed from the system administrator, it is possible to modify only SQL files. Warning Think of the cache clear function as a secondary thing and restart the application server as much as possible.","title":"Configuration"},{"location":"config/#configuration","text":"","title":"Configuration"},{"location":"config/#overview","text":"Set by code base at entry point. The items to be set are the following two and both are required. DB connection type Delegate for creating a System.Data.IDbDataParameter instance ConfigContainer.AddDefault( DbConnectionKind.SqlServer, // DB connection type () => new SqlParameter() // Delegate for creating a `System.Data.IDbDataParameter` instance ); WCF As the entry point is hidden in WCF, please be sure to write in the place where Service implementation method etc. are called.","title":"Overview"},{"location":"config/#db-connection-type","text":"EasySqlParser supports the following DB connections. DB connection type Description SqlServer DbConnection is System.Data.SqlClient.SqlConnection Microsoft SQL Server 2012 or later SqlServerLegacy DbConnection is System.Data.SqlClient.SqlConnection Microsoft SQL Server 2008 and earlier Oracle DbConnection is Oracle.DataAccess.Client.OracleConnection or Oracle.ManagedDataAccess.Client.OracleConnection Oracle 12c or later OracleLegacy DbConnection is Oracle.DataAccess.Client.OracleConnection or Oracle.ManagedDataAccess.Client.OracleConnection Oracle 11g and ealier DB2 DbConnection is IBM.Data.DB2.DB2Connection AS400 DbConnection is IBM.Data.DB2.iSeries.iDB2Connection MySql DbConnection is MySql.Data.MySqlClient.MySqlConnection PostgreSql DbConnection is Npgsql.NpgsqlConnection SQLite DbConnection is System.Data.SQLite.SQLiteConnection or Microsoft.Data.Sqlite.SqliteConnection Odbc DbConnection is System.Data.Odbc.OdbcConnection OleDb DbConnection is System.Data.Odbc.OleDbConnection Warning Make sure that the delegate for creating the System.Data.IDbDataParameter instance is set according to the DB connection implementation In case of multiple DB connection If you need multiple DB connections such as SQL Server and Oracle, please register additional settings using the AddAditional method ConfigContainer.AddAdditional( DbConnectionKind.Oracle, // DB connection type () => new OracleParameter() // Delegate for creating a `System.Data.IDbDataParameter` instance );","title":"DB connection type"},{"location":"config/#cache","text":"Like DOMA, EasySqlParser has a function to cache the contents of read SQL file. Therefore, if you want to modify only SQL files while the Web application is running, the changes are not reflected because the cache is effective. In such a case, if you allow SqlParser.ClearCache(path/to/sqlfile) to be executed from the system administrator, it is possible to modify only SQL files. Warning Think of the cache clear function as a secondary thing and restart the application server as much as possible.","title":"Cache"},{"location":"expression/","text":"Expression language Overview Simple expressions can be written in expression comments in SQL. The syntax is almost the same as C#. However, not all C# can do. Warning The following functions provided by DOMA are not supported by EasySqlParser. Arithmetic operators String concatenation operator Calling instance methods Accessing to instance fields Calling static methods Accessing to static fields Using custom functions Letarl The following literals are available in EasySqlParser Literal Type null - true bool false bool 10 int 10L long 0.123F float 0.123D double 0.123M decimal 10U uint 10UL ulong \"a\" string Numeric types are distinguished by adding a suffix such as L or F to the end of the literal. The suffix must be in upper case. SELECT t0.BusinessEntityID , t1.FirstName , t1.MiddleName , t1.LastName , t0.BirthDate , t0.MaritalStatus , t0.Gender , t0.HireDate FROM HumanResources.Employee t0 INNER JOIN Person.Person t1 ON t0.BusinessEntityID = t1.BusinessEntityID WHERE /*%if MiddleNames != null && MiddleNames.Count > 0 */ t1.MiddleName IN /* MiddleNames */ ( 'M' ) /*%end*/ Comparison operator The following comparison operators are available in EasySqlParser Operator Description == Equality operator != Inequality operator 1 < Less than operator <= Less than or equal operator > Greater than operator >= Greater than or equal operator SELECT * FROM HumanResources.Employee WHERE /*%if BusinessEntityID > 0 */ BusinessEntityID = /* BusinessEntityID */ 1 /*%end*/ Logical operator The following logical operators are available in EasySqlParser Operator Description ! Logical negation operator && Conditional logical AND operator || Conditional logical OR operator You can use parentheses to control the priority to which the operator is applied. SELECT t0. * FROM HumanResources.Employee t0 INNER JOIN HumanResources.EmployeeDepartmentHistory t1 ON t0.BusinessEntityID = t1.BusinessEntityID INNER JOIN HumanResources.Department t2 ON t1.DepartmentID = t2.DepartmentID INNER JOIN Person.Person t3 ON t0.BusinessEntityID = t3.BusinessEntityID WHERE /*%if (BusinessEntityID == null || DepartmentID == null) && FirstName != null */ t3.FirstName = /* FirstName */ 'smith' /*%end*/ Access instance properties Instance properties can be accessed by specifying property names separated by a dot . . Visibility must be public. SELECT t0.BusinessEntityID , t1.FirstName , t1.MiddleName , t1.LastName , t0.BirthDate , t0.MaritalStatus , t0.Gender , t0.HireDate FROM HumanResources.Employee t0 INNER JOIN Person.Person t1 ON t0.BusinessEntityID = t1.BusinessEntityID WHERE /*%if MiddleNames != null && MiddleNames.Count > 0 */ t1.MiddleName IN /* MiddleNames */ ( 'M' ) /*%end*/ Use of built-in functions Built-in functions are primarily utilities for changing the value of bind variables before binding to SQL. For example, when performing a forward match search with the LIKE clause, you can write: SELECT t0.BusinessEntityID , t1.FirstName , t1.MiddleName , t1.LastName , t0.BirthDate , t0.MaritalStatus , t0.Gender , t0.HireDate FROM HumanResources.Employee t0 INNER JOIN Person.Person t1 ON t0.BusinessEntityID = t1.BusinessEntityID WHERE /*%if FirstName != null && FirstName != \"\" */ t1.FirstName LIKE /* @StartsWith(FirstName) */ 'A%' /*%end*/ ORDER BY t0.BusinessEntityID The following built-in functions are available in EasySqlParser Return type Function name and parameters Description string @Escape(string text) Indicates to escape for LIKE operation. The return value is a string with the input value escaped. The escape is done using the default escape character ($). If you pass null as an argument, it returns null. string @Escape(string text, char escapeChar) Indicates to escape for LIKE operation. The return value is a string with the input value escaped. Escape is performed using the escape character specified in the second argument. If you pass null as the first argument, it returns null. string @StartsWith(string text) Indicates to perform a forward match search. The return value is a string after escaping the input value and appending a wildcard. The escape is done using the default escape character ($). If you pass null as an argument, it returns null. string @StartsWith(string text, char escapeChar) Indicates to perform a forward match search. The return value is a string after escaping the input value and appending a wildcard. Escape is performed using the escape character specified in the second argument. If you pass null as the first argument, it returns null. string @Contains(string text) Indicates that an intermediate match search is to be performed. The return value is a string with the input value escaped and wildcards given before and after. Escape is done using the default escape character ($). If you pass null as an argument, it returns null. string @Contains(string text, char escapeChar) Indicates that an intermediate match search is to be performed. The return value is a string with the input value escaped and wildcards given before and after. Escape is performed using the escape character specified in the second argument. If you pass null as the first argument, it returns null. string @EndsWith(string text) Indicates to perform a backward match search. The return value is a string with the input value escaped and preceded by a wildcard. Escape is done using the default escape character ($). If you pass null as an argument, it returns null. string @EndsWith(string text, char escapeChar) Indicates to perform a backward match search. The return value is a string with the input value escaped and preceded by a wildcard. Escape is performed using the escape character specified in the second argument. If you pass null as the first argument, it returns null. DateTime @TruncateTime(DateTime dateTime) Indicates to truncate the time part. The return value is a new date with the time portion truncated. If you pass null as an argument, it returns null. DateTimeOffset @TruncateTime(DateTimeOffset dateTimeOffset) Indicates to truncate the time part. The return value is a new date with the time portion truncated. If you pass null as an argument, it returns null. Can be <> \u21a9","title":"Expression language"},{"location":"expression/#expression-language","text":"","title":"Expression language"},{"location":"expression/#overview","text":"Simple expressions can be written in expression comments in SQL. The syntax is almost the same as C#. However, not all C# can do. Warning The following functions provided by DOMA are not supported by EasySqlParser. Arithmetic operators String concatenation operator Calling instance methods Accessing to instance fields Calling static methods Accessing to static fields Using custom functions","title":"Overview"},{"location":"expression/#letarl","text":"The following literals are available in EasySqlParser Literal Type null - true bool false bool 10 int 10L long 0.123F float 0.123D double 0.123M decimal 10U uint 10UL ulong \"a\" string Numeric types are distinguished by adding a suffix such as L or F to the end of the literal. The suffix must be in upper case. SELECT t0.BusinessEntityID , t1.FirstName , t1.MiddleName , t1.LastName , t0.BirthDate , t0.MaritalStatus , t0.Gender , t0.HireDate FROM HumanResources.Employee t0 INNER JOIN Person.Person t1 ON t0.BusinessEntityID = t1.BusinessEntityID WHERE /*%if MiddleNames != null && MiddleNames.Count > 0 */ t1.MiddleName IN /* MiddleNames */ ( 'M' ) /*%end*/","title":"Letarl"},{"location":"expression/#comparison-operator","text":"The following comparison operators are available in EasySqlParser Operator Description == Equality operator != Inequality operator 1 < Less than operator <= Less than or equal operator > Greater than operator >= Greater than or equal operator SELECT * FROM HumanResources.Employee WHERE /*%if BusinessEntityID > 0 */ BusinessEntityID = /* BusinessEntityID */ 1 /*%end*/","title":"Comparison operator"},{"location":"expression/#logical-operator","text":"The following logical operators are available in EasySqlParser Operator Description ! Logical negation operator && Conditional logical AND operator || Conditional logical OR operator You can use parentheses to control the priority to which the operator is applied. SELECT t0. * FROM HumanResources.Employee t0 INNER JOIN HumanResources.EmployeeDepartmentHistory t1 ON t0.BusinessEntityID = t1.BusinessEntityID INNER JOIN HumanResources.Department t2 ON t1.DepartmentID = t2.DepartmentID INNER JOIN Person.Person t3 ON t0.BusinessEntityID = t3.BusinessEntityID WHERE /*%if (BusinessEntityID == null || DepartmentID == null) && FirstName != null */ t3.FirstName = /* FirstName */ 'smith' /*%end*/","title":"Logical operator"},{"location":"expression/#access-instance-properties","text":"Instance properties can be accessed by specifying property names separated by a dot . . Visibility must be public. SELECT t0.BusinessEntityID , t1.FirstName , t1.MiddleName , t1.LastName , t0.BirthDate , t0.MaritalStatus , t0.Gender , t0.HireDate FROM HumanResources.Employee t0 INNER JOIN Person.Person t1 ON t0.BusinessEntityID = t1.BusinessEntityID WHERE /*%if MiddleNames != null && MiddleNames.Count > 0 */ t1.MiddleName IN /* MiddleNames */ ( 'M' ) /*%end*/","title":"Access instance properties"},{"location":"expression/#use-of-built-in-functions","text":"Built-in functions are primarily utilities for changing the value of bind variables before binding to SQL. For example, when performing a forward match search with the LIKE clause, you can write: SELECT t0.BusinessEntityID , t1.FirstName , t1.MiddleName , t1.LastName , t0.BirthDate , t0.MaritalStatus , t0.Gender , t0.HireDate FROM HumanResources.Employee t0 INNER JOIN Person.Person t1 ON t0.BusinessEntityID = t1.BusinessEntityID WHERE /*%if FirstName != null && FirstName != \"\" */ t1.FirstName LIKE /* @StartsWith(FirstName) */ 'A%' /*%end*/ ORDER BY t0.BusinessEntityID The following built-in functions are available in EasySqlParser Return type Function name and parameters Description string @Escape(string text) Indicates to escape for LIKE operation. The return value is a string with the input value escaped. The escape is done using the default escape character ($). If you pass null as an argument, it returns null. string @Escape(string text, char escapeChar) Indicates to escape for LIKE operation. The return value is a string with the input value escaped. Escape is performed using the escape character specified in the second argument. If you pass null as the first argument, it returns null. string @StartsWith(string text) Indicates to perform a forward match search. The return value is a string after escaping the input value and appending a wildcard. The escape is done using the default escape character ($). If you pass null as an argument, it returns null. string @StartsWith(string text, char escapeChar) Indicates to perform a forward match search. The return value is a string after escaping the input value and appending a wildcard. Escape is performed using the escape character specified in the second argument. If you pass null as the first argument, it returns null. string @Contains(string text) Indicates that an intermediate match search is to be performed. The return value is a string with the input value escaped and wildcards given before and after. Escape is done using the default escape character ($). If you pass null as an argument, it returns null. string @Contains(string text, char escapeChar) Indicates that an intermediate match search is to be performed. The return value is a string with the input value escaped and wildcards given before and after. Escape is performed using the escape character specified in the second argument. If you pass null as the first argument, it returns null. string @EndsWith(string text) Indicates to perform a backward match search. The return value is a string with the input value escaped and preceded by a wildcard. Escape is done using the default escape character ($). If you pass null as an argument, it returns null. string @EndsWith(string text, char escapeChar) Indicates to perform a backward match search. The return value is a string with the input value escaped and preceded by a wildcard. Escape is performed using the escape character specified in the second argument. If you pass null as the first argument, it returns null. DateTime @TruncateTime(DateTime dateTime) Indicates to truncate the time part. The return value is a new date with the time portion truncated. If you pass null as an argument, it returns null. DateTimeOffset @TruncateTime(DateTimeOffset dateTimeOffset) Indicates to truncate the time part. The return value is a new date with the time portion truncated. If you pass null as an argument, it returns null. Can be <> \u21a9","title":"Use of built-in functions"},{"location":"sql/","text":"SQL Overview 2-way-sql can do the following by adding it to regular SQL statement Assemble dynamic SQL with comments and bind variables Execute SQL from tools such as SQL Server Management Studio, SQL Developer, A5: SQL Mk-2, and DBeaver by specifying test data for bind variables SQL File The SQL file mentioned here is a plain text file written in 2-way-sql Encoding SQL file encoding must be UTF-8 SQL Comment Perform value binding and conditional branching by writing an expression in the SQL comment. SQL comments interpreted by EasySqlParser are called expression comments. Bind variable comment Embedded variable comment Condition comment Warning DOMA Repeated Comments (for) and Column List Expanded Comments (expand, populate) are not supported by EasySqlParser Bind variable comment An expression comment that indicates a bind variable is called a bind variable comment. Bind variables are generated as System.Data.IDbDataParameter . Bind variables are shown enclosed in block comments / * to * / . Bind variable names correspond to object property names. The corresponding parameter type must be a basic type such as string or int or System.Collections.Generic.IEnumerable<T> . You must specify test data immediately after the bind variable comment. However, test data is not used at runtime. Warning Bind variables were fields in DOMA, but are public properties in EasySqlParser Note If there is no test data, an error will occur when it is executed with tools such as SSMS, so test data is required Basic type parameters The following is an example of SqlParser parameters and the corresponding SQL var parser = new SqlParser( \"path/to/sql\" , new {BusinessEntityID = 99999 } ); var result = parser.Parse(); Console.WriteLine(result.DebugSql); /* SELECT * FROM HumanResources.Employee WHERE BusinessEntityID = 99999 */ SELECT * FROM HumanResources.Employee WHERE BusinessEntityID = /* BusinessEntityID */ 1 Warning Unlike DOMA, EasySqlParser 1 bind variable must also be a property Parameters of type IEnumerable<T> The bind variable passed to the IN clause must be a property of type IEnumerable <T> var parser = new SqlParser( \"path/to/sql\" , new {BusinessEntityIDs = new List< int >{ 10 , 11 , 12 }} ); var result = parser.Parse(); Console.WriteLine(result.DebugSql); /* SELECT * FROM HumanResources.Employee WHERE BusinessEntityID IN (10, 11, 12) */ SELECT * FROM HumanResources.Employee WHERE BusinessEntityID IN /* BusinessEntityIDs */ ( 1 ) Embedded variable comment An expression comment that indicates an embedded variable is called an embedded variable comment. Embedded variable values \u200b\u200bare embedded directly as part of SQL when assembling SQL. To prevent SQL injection, it is prohibited to include the following values \u200b\u200bin embedded variable values: a ingle quotation ( ' ) a semi colon ( ; ) line comment (such as -- John Doe) block comment (such as /* John Doe */) Embedded variables are indicated by a block comment /* # \uff5e */ . Embedded variable names are mapped to object property names. You can use embedded variables when you want to programmatically assemble parts of SQL, such as the ORDER BY clause. The following is an example of SqlParser parameters and the corresponding SQL var parser = new SqlParser( \"path/to/sql\" , new { BusinessEntityID = 1000 , Orderby = \"ORDER BY BirthDate ASC\" } ); var result = parser.Parse(); Console.WriteLine(result.DebugSql); /* SELECT * FROM HumanResources.Employee WHERE BusinessEntityID > 1000 */ SELECT * FROM HumanResources.Employee WHERE BusinessEntityID > /* BusinessEntityID */ 1 /*# Orderby */ Condition comment if and end An expression comment that indicates a conditional branch is called a conditional comment. The syntax is as follows: SELECT * FROM HumanResources.Employee WHERE /*%if BusinessEntityID != null */ BusinessEntityID = /* BusinessEntityID */ 1 /*%end*/ This translates to the following SQL statement if BusinessEntityID is not null SELECT * FROM HumanResources.Employee WHERE BusinessEntityID = @ BusinessEntityID Parameter markers like @ are automatically determined by the type of DB connection If BusinessEntityID is null , it will be the following SQL statement SELECT * FROM HumanResources.Employee As with DOMA, automatic removal of WHERE and HAVING in conditional comments removes the WHERE clause Automatic removal of WHERE and HAVING in conditional comments All conditional comments are false, and the WHERE clause and the HAVING clause do not hold WHERE before /*%if ~ */ is automatically removed Automatic removal of AND and OR in conditional comments If you use conditional comments, it automatically determines the necessity of output for AND and OR that follow the condition. For example, in the following SQL, BirthDate is null SELECT t0.BusinessEntityID , t1.FirstName , t1.MiddleName , t1.LastName , t0.BirthDate , t0.MaritalStatus , t0.Gender , t0.HireDate FROM HumanResources.Employee t0 INNER JOIN Person.Person t1 ON t0.BusinessEntityID = t1.BusinessEntityID WHERE /*%if BirthDate != null */ t0.BirthDate > /* BirthDate */ '1980-01-01' /*%end*/ AND t1.FirstName LIKE 'A%' ORDER BY t0.BusinessEntityID The AND after /*% end */ is automatically removed and the following SQL is generated SELECT t0.BusinessEntityID , t1.FirstName , t1.MiddleName , t1.LastName , t0.BirthDate , t0.MaritalStatus , t0.Gender , t0.HireDate FROM HumanResources.Employee t0 INNER JOIN Person.Person t1 ON t0.BusinessEntityID = t1.BusinessEntityID WHERE t1.FirstName LIKE 'A%' ORDER BY t0.BusinessEntityID elseif and else You can also use the following syntax for elseif or else between /*% if conditionals */ and /*% end*/ SELECT t0. * FROM HumanResources.Employee t0 INNER JOIN HumanResources.EmployeeDepartmentHistory t1 ON t0.BusinessEntityID = t1.BusinessEntityID INNER JOIN HumanResources.Department t2 ON t1.DepartmentID = t2.DepartmentID WHERE /*%if BusinessEntityID != null */ t0.BusinessEntityID = /* BusinessEntityID */ 9999 /*%elseif DepartmentID != null */ AND t2.DepartmentID = /* DepartmentID */ 99 /*%else*/ AND t1.EndDate IS NULL /*%end*/ If BusinessEntityID != Null holds SELECT t0. * FROM HumanResources.Employee t0 INNER JOIN HumanResources.EmployeeDepartmentHistory t1 ON t0.BusinessEntityID = t1.BusinessEntityID INNER JOIN HumanResources.Department t2 ON t1.DepartmentID = t2.DepartmentID WHERE t0.BusinessEntityID = @ BusinessEntityID If BusinessEntityID == null && DepartmentID != Null holds SELECT t0. * FROM HumanResources.Employee t0 INNER JOIN HumanResources.EmployeeDepartmentHistory t1 ON t0.BusinessEntityID = t1.BusinessEntityID INNER JOIN HumanResources.Department t2 ON t1.DepartmentID = t2.DepartmentID WHERE t2.DepartmentID = @ DepartmentID If BusinessEntityID == null && DepartmentID == null holds SELECT t0. * FROM HumanResources.Employee t0 INNER JOIN HumanResources.EmployeeDepartmentHistory t1 ON t0.BusinessEntityID = t1.BusinessEntityID INNER JOIN HumanResources.Department t2 ON t1.DepartmentID = t2.DepartmentID WHERE t1.EndDate IS NULL Nested conditional comments Conditional comments can be nested, as in .NET syntax SELECT t0. * FROM HumanResources.Employee t0 INNER JOIN Person.Person t1 ON t0.BusinessEntityID = t1.BusinessEntityID WHERE /*%if BusinessEntityID != null */ t0.BusinessEntityID = /* BusinessEntityID */ 1 /*%if MiddleName != null */ AND t1.MiddleName = /* MiddleName */ 'hoge' /*%else*/ AND t1.MiddleName IS NULL /*%end*/ /*%end*/ Constraints in conditional comments You can not use if ~ end across clauses (SELECT, FROM, WHERE, GROUP BY, HAVING, ORDER BY, etc.) e.g) SELECT * FROM HumanResources.Employee /*%if BusinessEntityID != null */ WHERE BusinessEntityID = /* BusinessEntityID */ 99 /*%end*/ It is also an error if if and end are at different levels as shown below SELECT * FROM HumanResources.Employee WHERE BusinessEntityID in /*%if BirthDate != null */ (... /*%end*/ ...) Repeated comment Not supported by EasySqlParser Selected column list expansion comment Not supported by EasySqlParser Update column list generation comment Not supported by EasySqlParser Normal block comment If the third character after the /* is a character that can not be used at the beginning of a C# identifier(Except for % , # , @ , \" and ' , which have special meaning in whitespace and expressions), it is considered a normal block comment Normal block comment example /**\uff5e*/ /*+\uff5e*/ /*=\uff5e*/ /*:\uff5e*/ /*;\uff5e*/ /*(\uff5e*/ /*)\uff5e*/ /*&\uff5e*/ Expression comment example /* \uff5e*/ /*a\uff5e*/ /*$\uff5e*/ /*%\uff5e*/ /*#\uff5e*/ /*@\uff5e*/ /*\"\uff5e*/ /*'\uff5e*/ Note Use /** ~ */ for normal block comments unless there is a specific reason Normal line comment -- is a line comment EasySqlParser does not interpret line comments","title":"SQL"},{"location":"sql/#sql","text":"","title":"SQL"},{"location":"sql/#overview","text":"2-way-sql can do the following by adding it to regular SQL statement Assemble dynamic SQL with comments and bind variables Execute SQL from tools such as SQL Server Management Studio, SQL Developer, A5: SQL Mk-2, and DBeaver by specifying test data for bind variables","title":"Overview"},{"location":"sql/#sql-file","text":"The SQL file mentioned here is a plain text file written in 2-way-sql","title":"SQL File"},{"location":"sql/#encoding","text":"SQL file encoding must be UTF-8","title":"Encoding"},{"location":"sql/#sql-comment","text":"Perform value binding and conditional branching by writing an expression in the SQL comment. SQL comments interpreted by EasySqlParser are called expression comments. Bind variable comment Embedded variable comment Condition comment Warning DOMA Repeated Comments (for) and Column List Expanded Comments (expand, populate) are not supported by EasySqlParser","title":"SQL Comment"},{"location":"sql/#bind-variable-comment","text":"An expression comment that indicates a bind variable is called a bind variable comment. Bind variables are generated as System.Data.IDbDataParameter . Bind variables are shown enclosed in block comments / * to * / . Bind variable names correspond to object property names. The corresponding parameter type must be a basic type such as string or int or System.Collections.Generic.IEnumerable<T> . You must specify test data immediately after the bind variable comment. However, test data is not used at runtime. Warning Bind variables were fields in DOMA, but are public properties in EasySqlParser Note If there is no test data, an error will occur when it is executed with tools such as SSMS, so test data is required","title":"Bind variable comment"},{"location":"sql/#basic-type-parameters","text":"The following is an example of SqlParser parameters and the corresponding SQL var parser = new SqlParser( \"path/to/sql\" , new {BusinessEntityID = 99999 } ); var result = parser.Parse(); Console.WriteLine(result.DebugSql); /* SELECT * FROM HumanResources.Employee WHERE BusinessEntityID = 99999 */ SELECT * FROM HumanResources.Employee WHERE BusinessEntityID = /* BusinessEntityID */ 1 Warning Unlike DOMA, EasySqlParser 1 bind variable must also be a property","title":"Basic type parameters"},{"location":"sql/#parameters-of-type-ienumerablet","text":"The bind variable passed to the IN clause must be a property of type IEnumerable <T> var parser = new SqlParser( \"path/to/sql\" , new {BusinessEntityIDs = new List< int >{ 10 , 11 , 12 }} ); var result = parser.Parse(); Console.WriteLine(result.DebugSql); /* SELECT * FROM HumanResources.Employee WHERE BusinessEntityID IN (10, 11, 12) */ SELECT * FROM HumanResources.Employee WHERE BusinessEntityID IN /* BusinessEntityIDs */ ( 1 )","title":"Parameters of type IEnumerable&lt;T&gt;"},{"location":"sql/#embedded-variable-comment","text":"An expression comment that indicates an embedded variable is called an embedded variable comment. Embedded variable values \u200b\u200bare embedded directly as part of SQL when assembling SQL. To prevent SQL injection, it is prohibited to include the following values \u200b\u200bin embedded variable values: a ingle quotation ( ' ) a semi colon ( ; ) line comment (such as -- John Doe) block comment (such as /* John Doe */) Embedded variables are indicated by a block comment /* # \uff5e */ . Embedded variable names are mapped to object property names. You can use embedded variables when you want to programmatically assemble parts of SQL, such as the ORDER BY clause. The following is an example of SqlParser parameters and the corresponding SQL var parser = new SqlParser( \"path/to/sql\" , new { BusinessEntityID = 1000 , Orderby = \"ORDER BY BirthDate ASC\" } ); var result = parser.Parse(); Console.WriteLine(result.DebugSql); /* SELECT * FROM HumanResources.Employee WHERE BusinessEntityID > 1000 */ SELECT * FROM HumanResources.Employee WHERE BusinessEntityID > /* BusinessEntityID */ 1 /*# Orderby */","title":"Embedded variable comment"},{"location":"sql/#condition-comment","text":"","title":"Condition comment"},{"location":"sql/#if-and-end","text":"An expression comment that indicates a conditional branch is called a conditional comment. The syntax is as follows: SELECT * FROM HumanResources.Employee WHERE /*%if BusinessEntityID != null */ BusinessEntityID = /* BusinessEntityID */ 1 /*%end*/ This translates to the following SQL statement if BusinessEntityID is not null SELECT * FROM HumanResources.Employee WHERE BusinessEntityID = @ BusinessEntityID Parameter markers like @ are automatically determined by the type of DB connection If BusinessEntityID is null , it will be the following SQL statement SELECT * FROM HumanResources.Employee As with DOMA, automatic removal of WHERE and HAVING in conditional comments removes the WHERE clause Automatic removal of WHERE and HAVING in conditional comments All conditional comments are false, and the WHERE clause and the HAVING clause do not hold WHERE before /*%if ~ */ is automatically removed Automatic removal of AND and OR in conditional comments If you use conditional comments, it automatically determines the necessity of output for AND and OR that follow the condition. For example, in the following SQL, BirthDate is null SELECT t0.BusinessEntityID , t1.FirstName , t1.MiddleName , t1.LastName , t0.BirthDate , t0.MaritalStatus , t0.Gender , t0.HireDate FROM HumanResources.Employee t0 INNER JOIN Person.Person t1 ON t0.BusinessEntityID = t1.BusinessEntityID WHERE /*%if BirthDate != null */ t0.BirthDate > /* BirthDate */ '1980-01-01' /*%end*/ AND t1.FirstName LIKE 'A%' ORDER BY t0.BusinessEntityID The AND after /*% end */ is automatically removed and the following SQL is generated SELECT t0.BusinessEntityID , t1.FirstName , t1.MiddleName , t1.LastName , t0.BirthDate , t0.MaritalStatus , t0.Gender , t0.HireDate FROM HumanResources.Employee t0 INNER JOIN Person.Person t1 ON t0.BusinessEntityID = t1.BusinessEntityID WHERE t1.FirstName LIKE 'A%' ORDER BY t0.BusinessEntityID","title":"if and end"},{"location":"sql/#elseif-and-else","text":"You can also use the following syntax for elseif or else between /*% if conditionals */ and /*% end*/ SELECT t0. * FROM HumanResources.Employee t0 INNER JOIN HumanResources.EmployeeDepartmentHistory t1 ON t0.BusinessEntityID = t1.BusinessEntityID INNER JOIN HumanResources.Department t2 ON t1.DepartmentID = t2.DepartmentID WHERE /*%if BusinessEntityID != null */ t0.BusinessEntityID = /* BusinessEntityID */ 9999 /*%elseif DepartmentID != null */ AND t2.DepartmentID = /* DepartmentID */ 99 /*%else*/ AND t1.EndDate IS NULL /*%end*/ If BusinessEntityID != Null holds SELECT t0. * FROM HumanResources.Employee t0 INNER JOIN HumanResources.EmployeeDepartmentHistory t1 ON t0.BusinessEntityID = t1.BusinessEntityID INNER JOIN HumanResources.Department t2 ON t1.DepartmentID = t2.DepartmentID WHERE t0.BusinessEntityID = @ BusinessEntityID If BusinessEntityID == null && DepartmentID != Null holds SELECT t0. * FROM HumanResources.Employee t0 INNER JOIN HumanResources.EmployeeDepartmentHistory t1 ON t0.BusinessEntityID = t1.BusinessEntityID INNER JOIN HumanResources.Department t2 ON t1.DepartmentID = t2.DepartmentID WHERE t2.DepartmentID = @ DepartmentID If BusinessEntityID == null && DepartmentID == null holds SELECT t0. * FROM HumanResources.Employee t0 INNER JOIN HumanResources.EmployeeDepartmentHistory t1 ON t0.BusinessEntityID = t1.BusinessEntityID INNER JOIN HumanResources.Department t2 ON t1.DepartmentID = t2.DepartmentID WHERE t1.EndDate IS NULL","title":"elseif and else"},{"location":"sql/#nested-conditional-comments","text":"Conditional comments can be nested, as in .NET syntax SELECT t0. * FROM HumanResources.Employee t0 INNER JOIN Person.Person t1 ON t0.BusinessEntityID = t1.BusinessEntityID WHERE /*%if BusinessEntityID != null */ t0.BusinessEntityID = /* BusinessEntityID */ 1 /*%if MiddleName != null */ AND t1.MiddleName = /* MiddleName */ 'hoge' /*%else*/ AND t1.MiddleName IS NULL /*%end*/ /*%end*/ Constraints in conditional comments You can not use if ~ end across clauses (SELECT, FROM, WHERE, GROUP BY, HAVING, ORDER BY, etc.) e.g) SELECT * FROM HumanResources.Employee /*%if BusinessEntityID != null */ WHERE BusinessEntityID = /* BusinessEntityID */ 99 /*%end*/ It is also an error if if and end are at different levels as shown below SELECT * FROM HumanResources.Employee WHERE BusinessEntityID in /*%if BirthDate != null */ (... /*%end*/ ...)","title":"Nested conditional comments"},{"location":"sql/#repeated-comment","text":"Not supported by EasySqlParser","title":"Repeated comment"},{"location":"sql/#selected-column-list-expansion-comment","text":"Not supported by EasySqlParser","title":"Selected column list expansion comment"},{"location":"sql/#update-column-list-generation-comment","text":"Not supported by EasySqlParser","title":"Update column list generation comment"},{"location":"sql/#normal-block-comment","text":"If the third character after the /* is a character that can not be used at the beginning of a C# identifier(Except for % , # , @ , \" and ' , which have special meaning in whitespace and expressions), it is considered a normal block comment Normal block comment example /**\uff5e*/ /*+\uff5e*/ /*=\uff5e*/ /*:\uff5e*/ /*;\uff5e*/ /*(\uff5e*/ /*)\uff5e*/ /*&\uff5e*/ Expression comment example /* \uff5e*/ /*a\uff5e*/ /*$\uff5e*/ /*%\uff5e*/ /*#\uff5e*/ /*@\uff5e*/ /*\"\uff5e*/ /*'\uff5e*/ Note Use /** ~ */ for normal block comments unless there is a specific reason","title":"Normal block comment"},{"location":"sql/#normal-line-comment","text":"-- is a line comment EasySqlParser does not interpret line comments","title":"Normal line comment"},{"location":"usage/","text":"Practical usage Overwview You need to define parameter object to parse SQL statement Parameter object Although parameter objects may be anonymous types, it is recommended to implement them as explicit types unless there is a specific reason Furthermore, placing the above parameter object class and SQL file close together makes it easier to manage. Warning Parameter objects can not access nested properties public class SqlCondition { public ChildCondition ChildCondition { get ; set ; } public string Name { get ; set ;} } public class ChildCondition { public string Name { get ; set ;} } In the above case, EasySqlParser can not access ChildCondition.Name Parse result The result of SqlParser#Parse (type SqlParserResult ) is returned as an object with the following properties: ParsedSql DebugSql DbDataParameters ParsedSql A parsed SQL statement to pass to ADO.NET , Dapper , Entity Framework Core , etc. Dynamically interpreted by the contents of parameter object , SQL statement is assembled Valid property values \u200b\u200bare replaced by the parameter name of the System.Data.IDbDataParameter instance DebugSql SQL statement for log output Dynamically interpreted by the contents of parameter object , SQL statement is assembled It will be a SQL statement with valid property values \u200b\u200bembedded DbDataParameters A collection of System.Data.IDbDataParameter instances for SQL execution System.Data.IDbDataParameter We use System.Data.IDbDataParameter for two reasons: Consideration for legacy such as ADO.NET DataSet Neutrality considerations from frameworks such as Dapper and Entity Framework Core Due to this, conversion of parameters is required for Dapper and Entity Framework Core . Please see Sample for a detailed example. Execution example (normal) /** SelectEmployees.sql */ SELECT t0.BusinessEntityID , t1.FirstName , t1.MiddleName , t1.LastName , t0.BirthDate , t0.MaritalStatus , t0.Gender , t0.HireDate FROM HumanResources.Employee t0 INNER JOIN Person.Person t1 ON t0.BusinessEntityID = t1.BusinessEntityID WHERE /*%if MiddleNames != null && MiddleNames.Count > 0 */ t1.MiddleName IN /* MiddleNames */ ( 'M' ) /*%end*/ /*%if BirthDateFrom != null && BirthDateTo != null */ AND t0.BirthDate BETWEEN /* BirthDateFrom */ '1980-01-01' AND /* BirthDateTo */ '1990-01-01' /*%end*/ /*%if FirstName != null && FirstName != \"\" */ AND t1.FirstName LIKE /* @StartsWith(FirstName) */ 'A%' /*%end*/ ORDER BY t0.BusinessEntityID public class SqlCondition { public List< string > MiddleNames { get ; set ; } public DateTime? BirthDateFrom { get ; set ; } public DateTime? BirthDateTo { get ; set ; } public string FirstName { get ; set ; } } public class Program { static void Main ( string [] args) { ConfigContainer.AddDefault( DbConnectionKind.SqlServer, // DB connection type () => new SqlParameter() // Delegate for creating a `System.Data.IDbDataParameter` instance ); ConfigContainer.EnableCache = true ; var condition = new SqlCondition { BirthDateFrom = new DateTime( 1980 , 1 , 1 ), BirthDateTo = new DateTime( 1990 , 1 , 1 ) }; var parser = new SqlParser( \"path/to/SelectEmployees.sql\" , condition); var result = parser.Parse(); } } In the above case, the results are as follows SqlParser#Parse ParsedSql SELECT t0.BusinessEntityID , t1.FirstName , t1.MiddleName , t1.LastName , t0.BirthDate , t0.MaritalStatus , t0.Gender , t0.HireDate FROM HumanResources.Employee t0 INNER JOIN Person.Person t1 ON t0.BusinessEntityID = t1.BusinessEntityID WHERE t0.BirthDate BETWEEN @ BirthDateFrom AND @ BirthDateTo ORDER BY t0.BusinessEntityID SqlParser#Parse DebugSql SELECT t0.BusinessEntityID , t1.FirstName , t1.MiddleName , t1.LastName , t0.BirthDate , t0.MaritalStatus , t0.Gender , t0.HireDate FROM HumanResources.Employee t0 INNER JOIN Person.Person t1 ON t0.BusinessEntityID = t1.BusinessEntityID WHERE t0.BirthDate BETWEEN '1980/01/01 0:00:00' AND '1990/01/01 0:00:00' ORDER BY t0.BusinessEntityID SqlParser#Parse DbDataParameters index parameter name parameter value 0 @BirthDateFrom new DateTime(1980, 1, 1) 1 @BirthDateTo new DateTime(1990, 1, 1) Paging EasySqlParser can generate SQL statement for data acquisition and SQL statement for number acquisition by rewriting SQL file internally The result of SqlParser#ParsePaginated is returned as an object with the following properties: Result CountResult Result SqlParserResult for getting data It is of type SqlParserResult and has\u3000 ParsedSql , DebugSql , DbDataParameters as well as SqlParser#Parse . CountResult SqlParserResult for getting the number It also has ParsedSql , DebugSql , DbDataParameters Execution example (paging) The SQL file and parameter object are omitted because they are the same public class Program { static void Main ( string [] args) { ConfigContainer.AddDefault( DbConnectionKind.SqlServer, () => new SqlParameter() ); ConfigContainer.EnableCache = true ; var condition = new SqlCondition { BirthDateFrom = new DateTime( 1980 , 1 , 1 ), BirthDateTo = new DateTime( 1990 , 1 , 1 ) }; var parser = new SqlParser( \"path/to/SelectEmployees.sql\" , condition); var result = parser.ParsePaginated( 10 , 10 ); // getting 11 to 20 items } } SqlParser#ParsePaginated Result.ParsedSql SELECT t0.BusinessEntityID , t1.FirstName , t1.MiddleName , t1.LastName , t0.BirthDate , t0.MaritalStatus , t0.Gender , t0.HireDate FROM HumanResources.Employee t0 INNER JOIN Person.Person t1 ON t0.BusinessEntityID = t1.BusinessEntityID WHERE t0.BirthDate BETWEEN @ BirthDateFrom AND @ BirthDateTo ORDER BY t0.BusinessEntityID offset 10 rows fetch next 10 rows only SqlParser#ParsePaginated Result.DebugSql SELECT t0.BusinessEntityID , t1.FirstName , t1.MiddleName , t1.LastName , t0.BirthDate , t0.MaritalStatus , t0.Gender , t0.HireDate FROM HumanResources.Employee t0 INNER JOIN Person.Person t1 ON t0.BusinessEntityID = t1.BusinessEntityID WHERE t0.BirthDate BETWEEN '1980/01/01 0:00:00' AND '1990/01/01 0:00:00' ORDER BY t0.BusinessEntityID offset 10 rows fetch next 10 rows only SqlParser#ParsePaginated CountResult.ParsedSql select count ( * ) from ( SELECT t0.BusinessEntityID , t1.FirstName , t1.MiddleName , t1.LastName , t0.BirthDate , t0.MaritalStatus , t0.Gender , t0.HireDate FROM HumanResources.Employee t0 INNER JOIN Person.Person t1 ON t0.BusinessEntityID = t1.BusinessEntityID WHERE t0.BirthDate BETWEEN @ BirthDateFrom AND @ BirthDateTo ) t_ SqlParser#ParsePaginated CountResult.DebugSql select count ( * ) from ( SELECT t0.BusinessEntityID , t1.FirstName , t1.MiddleName , t1.LastName , t0.BirthDate , t0.MaritalStatus , t0.Gender , t0.HireDate FROM HumanResources.Employee t0 INNER JOIN Person.Person t1 ON t0.BusinessEntityID = t1.BusinessEntityID WHERE t0.BirthDate BETWEEN '1980/01/01 0:00:00' AND '1990/01/01 0:00:00' ) t_ Use of ROW_NUMBER If an arbitrary string is given to the rowNumberColumn parameter of SqlParser#ParsePaginated , it will be forced to use the ROW_NUMBER function regardless of the DB connection type. rowNumberColumn is a virtual column name that receives the return value of the ROW_NUMBER function Can be used to output line numbers in the View layer Warning Please check if DB can use ROW_NUMBER before using The available DBs and versions are as follows: DB Version SQLServer 2005 Oracle 9i MySQL 8 PostgreSQL 8.4 DB2 9.1 SQLite 3.25 Execution example (ROW_NUMBER) The SQL file and parameter object are omitted because they are the same public class Program { static void Main ( string [] args) { ConfigContainer.AddDefault( DbConnectionKind.SqlServer, () => new SqlParameter() ); ConfigContainer.EnableCache = true ; var condition = new SqlCondition { BirthDateFrom = new DateTime( 1980 , 1 , 1 ), BirthDateTo = new DateTime( 1990 , 1 , 1 ) }; var parser = new SqlParser( \"path/to/SelectEmployees.sql\" , condition); var result = parser.ParsePaginated( 10 , 10 , \"LineNo\" ); // getting 11 to 20 items } } ROW_NUMBER Result.ParsedSql select * from ( select temp_. * , row_number() over( ORDER BY temp_.BusinessEntityID ) as LineNo from ( SELECT t0.BusinessEntityID , t1.FirstName , t1.MiddleName , t1.LastName , t0.BirthDate , t0.MaritalStatus , t0.Gender , t0.HireDate FROM HumanResources.Employee t0 INNER JOIN Person.Person t1 ON t0.BusinessEntityID = t1.BusinessEntityID WHERE t0.BirthDate BETWEEN @ BirthDateFrom AND @ BirthDateTo ) as temp_ ) as temp2_ where LineNo > 10 and LineNo <= 20 ROW_NUMBER Result.DebugSql select * from ( select temp_. * , row_number() over( ORDER BY temp_.BusinessEntityID ) as LineNo from ( SELECT t0.BusinessEntityID , t1.FirstName , t1.MiddleName , t1.LastName , t0.BirthDate , t0.MaritalStatus , t0.Gender , t0.HireDate FROM HumanResources.Employee t0 INNER JOIN Person.Person t1 ON t0.BusinessEntityID = t1.BusinessEntityID WHERE t0.BirthDate BETWEEN '1980/01/01 0:00:00' AND '1990/01/01 0:00:00' ) as temp_ ) as temp2_ where LineNo > 10 and LineNo <= 20","title":"Practical usage"},{"location":"usage/#practical-usage","text":"","title":"Practical usage"},{"location":"usage/#overwview","text":"You need to define parameter object to parse SQL statement Parameter object Although parameter objects may be anonymous types, it is recommended to implement them as explicit types unless there is a specific reason Furthermore, placing the above parameter object class and SQL file close together makes it easier to manage. Warning Parameter objects can not access nested properties public class SqlCondition { public ChildCondition ChildCondition { get ; set ; } public string Name { get ; set ;} } public class ChildCondition { public string Name { get ; set ;} } In the above case, EasySqlParser can not access ChildCondition.Name","title":"Overwview"},{"location":"usage/#parse-result","text":"The result of SqlParser#Parse (type SqlParserResult ) is returned as an object with the following properties: ParsedSql DebugSql DbDataParameters","title":"Parse result"},{"location":"usage/#parsedsql","text":"A parsed SQL statement to pass to ADO.NET , Dapper , Entity Framework Core , etc. Dynamically interpreted by the contents of parameter object , SQL statement is assembled Valid property values \u200b\u200bare replaced by the parameter name of the System.Data.IDbDataParameter instance","title":"ParsedSql"},{"location":"usage/#debugsql","text":"SQL statement for log output Dynamically interpreted by the contents of parameter object , SQL statement is assembled It will be a SQL statement with valid property values \u200b\u200bembedded","title":"DebugSql"},{"location":"usage/#dbdataparameters","text":"A collection of System.Data.IDbDataParameter instances for SQL execution System.Data.IDbDataParameter We use System.Data.IDbDataParameter for two reasons: Consideration for legacy such as ADO.NET DataSet Neutrality considerations from frameworks such as Dapper and Entity Framework Core Due to this, conversion of parameters is required for Dapper and Entity Framework Core . Please see Sample for a detailed example.","title":"DbDataParameters"},{"location":"usage/#execution-example-normal","text":"/** SelectEmployees.sql */ SELECT t0.BusinessEntityID , t1.FirstName , t1.MiddleName , t1.LastName , t0.BirthDate , t0.MaritalStatus , t0.Gender , t0.HireDate FROM HumanResources.Employee t0 INNER JOIN Person.Person t1 ON t0.BusinessEntityID = t1.BusinessEntityID WHERE /*%if MiddleNames != null && MiddleNames.Count > 0 */ t1.MiddleName IN /* MiddleNames */ ( 'M' ) /*%end*/ /*%if BirthDateFrom != null && BirthDateTo != null */ AND t0.BirthDate BETWEEN /* BirthDateFrom */ '1980-01-01' AND /* BirthDateTo */ '1990-01-01' /*%end*/ /*%if FirstName != null && FirstName != \"\" */ AND t1.FirstName LIKE /* @StartsWith(FirstName) */ 'A%' /*%end*/ ORDER BY t0.BusinessEntityID public class SqlCondition { public List< string > MiddleNames { get ; set ; } public DateTime? BirthDateFrom { get ; set ; } public DateTime? BirthDateTo { get ; set ; } public string FirstName { get ; set ; } } public class Program { static void Main ( string [] args) { ConfigContainer.AddDefault( DbConnectionKind.SqlServer, // DB connection type () => new SqlParameter() // Delegate for creating a `System.Data.IDbDataParameter` instance ); ConfigContainer.EnableCache = true ; var condition = new SqlCondition { BirthDateFrom = new DateTime( 1980 , 1 , 1 ), BirthDateTo = new DateTime( 1990 , 1 , 1 ) }; var parser = new SqlParser( \"path/to/SelectEmployees.sql\" , condition); var result = parser.Parse(); } } In the above case, the results are as follows","title":"Execution example (normal)"},{"location":"usage/#sqlparserparse-parsedsql","text":"SELECT t0.BusinessEntityID , t1.FirstName , t1.MiddleName , t1.LastName , t0.BirthDate , t0.MaritalStatus , t0.Gender , t0.HireDate FROM HumanResources.Employee t0 INNER JOIN Person.Person t1 ON t0.BusinessEntityID = t1.BusinessEntityID WHERE t0.BirthDate BETWEEN @ BirthDateFrom AND @ BirthDateTo ORDER BY t0.BusinessEntityID","title":"SqlParser#Parse ParsedSql"},{"location":"usage/#sqlparserparse-debugsql","text":"SELECT t0.BusinessEntityID , t1.FirstName , t1.MiddleName , t1.LastName , t0.BirthDate , t0.MaritalStatus , t0.Gender , t0.HireDate FROM HumanResources.Employee t0 INNER JOIN Person.Person t1 ON t0.BusinessEntityID = t1.BusinessEntityID WHERE t0.BirthDate BETWEEN '1980/01/01 0:00:00' AND '1990/01/01 0:00:00' ORDER BY t0.BusinessEntityID","title":"SqlParser#Parse DebugSql"},{"location":"usage/#sqlparserparse-dbdataparameters","text":"index parameter name parameter value 0 @BirthDateFrom new DateTime(1980, 1, 1) 1 @BirthDateTo new DateTime(1990, 1, 1)","title":"SqlParser#Parse DbDataParameters"},{"location":"usage/#paging","text":"EasySqlParser can generate SQL statement for data acquisition and SQL statement for number acquisition by rewriting SQL file internally The result of SqlParser#ParsePaginated is returned as an object with the following properties: Result CountResult","title":"Paging"},{"location":"usage/#result","text":"SqlParserResult for getting data It is of type SqlParserResult and has\u3000 ParsedSql , DebugSql , DbDataParameters as well as SqlParser#Parse .","title":"Result"},{"location":"usage/#countresult","text":"SqlParserResult for getting the number It also has ParsedSql , DebugSql , DbDataParameters","title":"CountResult"},{"location":"usage/#execution-example-paging","text":"The SQL file and parameter object are omitted because they are the same public class Program { static void Main ( string [] args) { ConfigContainer.AddDefault( DbConnectionKind.SqlServer, () => new SqlParameter() ); ConfigContainer.EnableCache = true ; var condition = new SqlCondition { BirthDateFrom = new DateTime( 1980 , 1 , 1 ), BirthDateTo = new DateTime( 1990 , 1 , 1 ) }; var parser = new SqlParser( \"path/to/SelectEmployees.sql\" , condition); var result = parser.ParsePaginated( 10 , 10 ); // getting 11 to 20 items } }","title":"Execution example (paging)"},{"location":"usage/#sqlparserparsepaginated-resultparsedsql","text":"SELECT t0.BusinessEntityID , t1.FirstName , t1.MiddleName , t1.LastName , t0.BirthDate , t0.MaritalStatus , t0.Gender , t0.HireDate FROM HumanResources.Employee t0 INNER JOIN Person.Person t1 ON t0.BusinessEntityID = t1.BusinessEntityID WHERE t0.BirthDate BETWEEN @ BirthDateFrom AND @ BirthDateTo ORDER BY t0.BusinessEntityID offset 10 rows fetch next 10 rows only","title":"SqlParser#ParsePaginated Result.ParsedSql"},{"location":"usage/#sqlparserparsepaginated-resultdebugsql","text":"SELECT t0.BusinessEntityID , t1.FirstName , t1.MiddleName , t1.LastName , t0.BirthDate , t0.MaritalStatus , t0.Gender , t0.HireDate FROM HumanResources.Employee t0 INNER JOIN Person.Person t1 ON t0.BusinessEntityID = t1.BusinessEntityID WHERE t0.BirthDate BETWEEN '1980/01/01 0:00:00' AND '1990/01/01 0:00:00' ORDER BY t0.BusinessEntityID offset 10 rows fetch next 10 rows only","title":"SqlParser#ParsePaginated Result.DebugSql"},{"location":"usage/#sqlparserparsepaginated-countresultparsedsql","text":"select count ( * ) from ( SELECT t0.BusinessEntityID , t1.FirstName , t1.MiddleName , t1.LastName , t0.BirthDate , t0.MaritalStatus , t0.Gender , t0.HireDate FROM HumanResources.Employee t0 INNER JOIN Person.Person t1 ON t0.BusinessEntityID = t1.BusinessEntityID WHERE t0.BirthDate BETWEEN @ BirthDateFrom AND @ BirthDateTo ) t_","title":"SqlParser#ParsePaginated CountResult.ParsedSql"},{"location":"usage/#sqlparserparsepaginated-countresultdebugsql","text":"select count ( * ) from ( SELECT t0.BusinessEntityID , t1.FirstName , t1.MiddleName , t1.LastName , t0.BirthDate , t0.MaritalStatus , t0.Gender , t0.HireDate FROM HumanResources.Employee t0 INNER JOIN Person.Person t1 ON t0.BusinessEntityID = t1.BusinessEntityID WHERE t0.BirthDate BETWEEN '1980/01/01 0:00:00' AND '1990/01/01 0:00:00' ) t_","title":"SqlParser#ParsePaginated CountResult.DebugSql"},{"location":"usage/#use-of-row_number","text":"If an arbitrary string is given to the rowNumberColumn parameter of SqlParser#ParsePaginated , it will be forced to use the ROW_NUMBER function regardless of the DB connection type. rowNumberColumn is a virtual column name that receives the return value of the ROW_NUMBER function Can be used to output line numbers in the View layer Warning Please check if DB can use ROW_NUMBER before using The available DBs and versions are as follows: DB Version SQLServer 2005 Oracle 9i MySQL 8 PostgreSQL 8.4 DB2 9.1 SQLite 3.25","title":"Use of ROW_NUMBER"},{"location":"usage/#execution-example-row_number","text":"The SQL file and parameter object are omitted because they are the same public class Program { static void Main ( string [] args) { ConfigContainer.AddDefault( DbConnectionKind.SqlServer, () => new SqlParameter() ); ConfigContainer.EnableCache = true ; var condition = new SqlCondition { BirthDateFrom = new DateTime( 1980 , 1 , 1 ), BirthDateTo = new DateTime( 1990 , 1 , 1 ) }; var parser = new SqlParser( \"path/to/SelectEmployees.sql\" , condition); var result = parser.ParsePaginated( 10 , 10 , \"LineNo\" ); // getting 11 to 20 items } }","title":"Execution example (ROW_NUMBER)"},{"location":"usage/#row_number-resultparsedsql","text":"select * from ( select temp_. * , row_number() over( ORDER BY temp_.BusinessEntityID ) as LineNo from ( SELECT t0.BusinessEntityID , t1.FirstName , t1.MiddleName , t1.LastName , t0.BirthDate , t0.MaritalStatus , t0.Gender , t0.HireDate FROM HumanResources.Employee t0 INNER JOIN Person.Person t1 ON t0.BusinessEntityID = t1.BusinessEntityID WHERE t0.BirthDate BETWEEN @ BirthDateFrom AND @ BirthDateTo ) as temp_ ) as temp2_ where LineNo > 10 and LineNo <= 20","title":"ROW_NUMBER Result.ParsedSql"},{"location":"usage/#row_number-resultdebugsql","text":"select * from ( select temp_. * , row_number() over( ORDER BY temp_.BusinessEntityID ) as LineNo from ( SELECT t0.BusinessEntityID , t1.FirstName , t1.MiddleName , t1.LastName , t0.BirthDate , t0.MaritalStatus , t0.Gender , t0.HireDate FROM HumanResources.Employee t0 INNER JOIN Person.Person t1 ON t0.BusinessEntityID = t1.BusinessEntityID WHERE t0.BirthDate BETWEEN '1980/01/01 0:00:00' AND '1990/01/01 0:00:00' ) as temp_ ) as temp2_ where LineNo > 10 and LineNo <= 20","title":"ROW_NUMBER Result.DebugSql"},{"location":"ja/config/","text":"\u8a2d\u5b9a \u6982\u8981 \u30a8\u30f3\u30c8\u30ea\u30fc\u30dd\u30a4\u30f3\u30c8\u3067\u30b3\u30fc\u30c9\u30d9\u30fc\u30b9\u306b\u3088\u308b\u8a2d\u5b9a\u3092\u884c\u3044\u307e\u3059 \u8a2d\u5b9a\u3059\u308b\u9805\u76ee\u306f\u4ee5\u4e0b\u306e2\u3064\u3067\u3069\u3061\u3089\u3082\u5fc5\u9808\u3067\u3059 DB\u63a5\u7d9a\u306e\u7a2e\u985e System.Data.IDbDataParameter \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306e\u30c7\u30ea\u30b2\u30fc\u30c8 ConfigContainer.AddDefault( DbConnectionKind.SqlServer, // DB\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u306e\u7a2e\u985e () => new SqlParameter() // SQL\u30d1\u30e9\u30e1\u30fc\u30bf\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u4f5c\u6210\u306e\u30c7\u30ea\u30b2\u30fc\u30c8 ); WCF WCF\u3067\u306f\u30a8\u30f3\u30c8\u30ea\u30fc\u30dd\u30a4\u30f3\u30c8\u304c\u96a0\u307a\u3044\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001Service\u5b9f\u88c5\u30e1\u30bd\u30c3\u30c9\u306a\u3069\u5fc5\u305a\u547c\u3070\u308c\u308b\u5834\u6240\u306b\u8a18\u8ff0\u3057\u3066\u304f\u3060\u3055\u3044 DB\u63a5\u7d9a\u306e\u7a2e\u985e EasySqlParser\u3067\u306f\u4ee5\u4e0b\u306eDB\u63a5\u7d9a\u304c\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u307e\u3059 DB\u63a5\u7d9a\u306e\u7a2e\u985e \u8aac\u660e SqlServer DB\u63a5\u7d9a\u306e\u5b9f\u88c5\u306f System.Data.SqlClient.SqlConnection Microsoft SQL Server 2012 \u4ee5\u964d SqlServerLegacy DB\u63a5\u7d9a\u306e\u5b9f\u88c5\u306f System.Data.SqlClient.SqlConnection Microsoft SQL Server 2008 \u4ee5\u524d Oracle DB\u63a5\u7d9a\u306e\u5b9f\u88c5\u306f Oracle.DataAccess.Client.OracleConnection \u307e\u305f\u306f Oracle.ManagedDataAccess.Client.OracleConnection Oracle 12c \u4ee5\u964d OracleLegacy DB\u63a5\u7d9a\u306e\u5b9f\u88c5\u306f Oracle.DataAccess.Client.OracleConnection \u307e\u305f\u306f Oracle.ManagedDataAccess.Client.OracleConnection Oracle 11g \u4ee5\u524d DB2 DB\u63a5\u7d9a\u306e\u5b9f\u88c5\u306f IBM.Data.DB2.DB2Connection AS400 DB\u63a5\u7d9a\u306e\u5b9f\u88c5\u306f IBM.Data.DB2.iSeries.iDB2Connection MySql DB\u63a5\u7d9a\u306e\u5b9f\u88c5\u306f MySql.Data.MySqlClient.MySqlConnection PostgreSql DB\u63a5\u7d9a\u306e\u5b9f\u88c5\u306f Npgsql.NpgsqlConnection SQLite DB\u63a5\u7d9a\u306e\u5b9f\u88c5\u306f System.Data.SQLite.SQLiteConnection \u307e\u305f\u306f Microsoft.Data.Sqlite.SqliteConnection Odbc DB\u63a5\u7d9a\u306e\u5b9f\u88c5\u306f System.Data.Odbc.OdbcConnection OleDb DB\u63a5\u7d9a\u306e\u5b9f\u88c5\u306f System.Data.Odbc.OleDbConnection Warning System.Data.IDbDataParameter \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306e\u30c7\u30ea\u30b2\u30fc\u30c8\u306fDB\u63a5\u7d9a\u306e\u5b9f\u88c5\u306b\u5fdc\u3058\u305f\u3082\u306e\u3092\u8a2d\u5b9a\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u304f\u3060\u3055\u3044 \u8907\u6570DB\u63a5\u7d9a\u306e\u5834\u5408 SQL Server\u3068Oracle\u306a\u3069\u8907\u6570\u306eDB\u63a5\u7d9a\u304c\u5fc5\u8981\u306a\u5834\u5408\u306f AddAditional \u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3063\u3066\u8ffd\u52a0\u306e\u8a2d\u5b9a\u3092\u767b\u9332\u3057\u3066\u304f\u3060\u3055\u3044 ConfigContainer.AddAdditional( DbConnectionKind.Oracle, // DB\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u306e\u7a2e\u985e () => new OracleParameter() // SQL\u30d1\u30e9\u30e1\u30fc\u30bf\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u4f5c\u6210\u306e\u30c7\u30ea\u30b2\u30fc\u30c8 ); \u30ad\u30e3\u30c3\u30b7\u30e5 EasySqlParser\u3067\u306fDOMA\u3068\u540c\u69d8\u3001\u8aad\u307f\u8fbc\u3093\u3060SQL\u30d5\u30a1\u30a4\u30eb\u306e\u5185\u5bb9\u3092\u30ad\u30e3\u30c3\u30b7\u30e5\u3059\u308b\u6a5f\u80fd\u3092\u642d\u8f09\u3057\u3066\u3044\u307e\u3059\u3002 \u3053\u306e\u305f\u3081\u3001Web\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u7a3c\u50cd\u4e2d\u306bSQL\u30d5\u30a1\u30a4\u30eb\u306e\u307f\u306e\u4fee\u6b63\u3092\u884c\u3044\u305f\u3044\u5834\u5408\u3001\u30ad\u30e3\u30c3\u30b7\u30e5\u304c\u52b9\u3044\u3066\u3044\u308b\u305f\u3081\u5909\u66f4\u304c\u53cd\u6620\u3055\u308c\u307e\u305b\u3093\u3002 \u3053\u306e\u3088\u3046\u306a\u5834\u5408\u306b\u306f SqlParser.ClearCache(path/to/sqlfile) \u3092\u30b7\u30b9\u30c6\u30e0\u7ba1\u7406\u8005\u304b\u3089\u5b9f\u884c\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u304a\u3051\u3070\u3001SQL\u30d5\u30a1\u30a4\u30eb\u306e\u307f\u306e\u4fee\u6b63\u304c\u53ef\u80fd\u3068\u306a\u308a\u307e\u3059\u3002 Warning \u30ad\u30e3\u30c3\u30b7\u30e5\u30af\u30ea\u30a2\u6a5f\u80fd\u306f\u88dc\u52a9\u7684\u306a\u3082\u306e\u3068\u8003\u3048\u3001\u53ef\u80fd\u306a\u9650\u308a\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30b5\u30fc\u30d0\u3092\u518d\u8d77\u52d5\u3057\u3066\u304f\u3060\u3055\u3044","title":"\u8a2d\u5b9a"},{"location":"ja/config/#_1","text":"","title":"\u8a2d\u5b9a"},{"location":"ja/config/#_2","text":"\u30a8\u30f3\u30c8\u30ea\u30fc\u30dd\u30a4\u30f3\u30c8\u3067\u30b3\u30fc\u30c9\u30d9\u30fc\u30b9\u306b\u3088\u308b\u8a2d\u5b9a\u3092\u884c\u3044\u307e\u3059 \u8a2d\u5b9a\u3059\u308b\u9805\u76ee\u306f\u4ee5\u4e0b\u306e2\u3064\u3067\u3069\u3061\u3089\u3082\u5fc5\u9808\u3067\u3059 DB\u63a5\u7d9a\u306e\u7a2e\u985e System.Data.IDbDataParameter \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306e\u30c7\u30ea\u30b2\u30fc\u30c8 ConfigContainer.AddDefault( DbConnectionKind.SqlServer, // DB\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u306e\u7a2e\u985e () => new SqlParameter() // SQL\u30d1\u30e9\u30e1\u30fc\u30bf\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u4f5c\u6210\u306e\u30c7\u30ea\u30b2\u30fc\u30c8 ); WCF WCF\u3067\u306f\u30a8\u30f3\u30c8\u30ea\u30fc\u30dd\u30a4\u30f3\u30c8\u304c\u96a0\u307a\u3044\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001Service\u5b9f\u88c5\u30e1\u30bd\u30c3\u30c9\u306a\u3069\u5fc5\u305a\u547c\u3070\u308c\u308b\u5834\u6240\u306b\u8a18\u8ff0\u3057\u3066\u304f\u3060\u3055\u3044","title":"\u6982\u8981"},{"location":"ja/config/#db","text":"EasySqlParser\u3067\u306f\u4ee5\u4e0b\u306eDB\u63a5\u7d9a\u304c\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u307e\u3059 DB\u63a5\u7d9a\u306e\u7a2e\u985e \u8aac\u660e SqlServer DB\u63a5\u7d9a\u306e\u5b9f\u88c5\u306f System.Data.SqlClient.SqlConnection Microsoft SQL Server 2012 \u4ee5\u964d SqlServerLegacy DB\u63a5\u7d9a\u306e\u5b9f\u88c5\u306f System.Data.SqlClient.SqlConnection Microsoft SQL Server 2008 \u4ee5\u524d Oracle DB\u63a5\u7d9a\u306e\u5b9f\u88c5\u306f Oracle.DataAccess.Client.OracleConnection \u307e\u305f\u306f Oracle.ManagedDataAccess.Client.OracleConnection Oracle 12c \u4ee5\u964d OracleLegacy DB\u63a5\u7d9a\u306e\u5b9f\u88c5\u306f Oracle.DataAccess.Client.OracleConnection \u307e\u305f\u306f Oracle.ManagedDataAccess.Client.OracleConnection Oracle 11g \u4ee5\u524d DB2 DB\u63a5\u7d9a\u306e\u5b9f\u88c5\u306f IBM.Data.DB2.DB2Connection AS400 DB\u63a5\u7d9a\u306e\u5b9f\u88c5\u306f IBM.Data.DB2.iSeries.iDB2Connection MySql DB\u63a5\u7d9a\u306e\u5b9f\u88c5\u306f MySql.Data.MySqlClient.MySqlConnection PostgreSql DB\u63a5\u7d9a\u306e\u5b9f\u88c5\u306f Npgsql.NpgsqlConnection SQLite DB\u63a5\u7d9a\u306e\u5b9f\u88c5\u306f System.Data.SQLite.SQLiteConnection \u307e\u305f\u306f Microsoft.Data.Sqlite.SqliteConnection Odbc DB\u63a5\u7d9a\u306e\u5b9f\u88c5\u306f System.Data.Odbc.OdbcConnection OleDb DB\u63a5\u7d9a\u306e\u5b9f\u88c5\u306f System.Data.Odbc.OleDbConnection Warning System.Data.IDbDataParameter \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306e\u30c7\u30ea\u30b2\u30fc\u30c8\u306fDB\u63a5\u7d9a\u306e\u5b9f\u88c5\u306b\u5fdc\u3058\u305f\u3082\u306e\u3092\u8a2d\u5b9a\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u304f\u3060\u3055\u3044 \u8907\u6570DB\u63a5\u7d9a\u306e\u5834\u5408 SQL Server\u3068Oracle\u306a\u3069\u8907\u6570\u306eDB\u63a5\u7d9a\u304c\u5fc5\u8981\u306a\u5834\u5408\u306f AddAditional \u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3063\u3066\u8ffd\u52a0\u306e\u8a2d\u5b9a\u3092\u767b\u9332\u3057\u3066\u304f\u3060\u3055\u3044 ConfigContainer.AddAdditional( DbConnectionKind.Oracle, // DB\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u306e\u7a2e\u985e () => new OracleParameter() // SQL\u30d1\u30e9\u30e1\u30fc\u30bf\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u4f5c\u6210\u306e\u30c7\u30ea\u30b2\u30fc\u30c8 );","title":"DB\u63a5\u7d9a\u306e\u7a2e\u985e"},{"location":"ja/config/#_3","text":"EasySqlParser\u3067\u306fDOMA\u3068\u540c\u69d8\u3001\u8aad\u307f\u8fbc\u3093\u3060SQL\u30d5\u30a1\u30a4\u30eb\u306e\u5185\u5bb9\u3092\u30ad\u30e3\u30c3\u30b7\u30e5\u3059\u308b\u6a5f\u80fd\u3092\u642d\u8f09\u3057\u3066\u3044\u307e\u3059\u3002 \u3053\u306e\u305f\u3081\u3001Web\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u7a3c\u50cd\u4e2d\u306bSQL\u30d5\u30a1\u30a4\u30eb\u306e\u307f\u306e\u4fee\u6b63\u3092\u884c\u3044\u305f\u3044\u5834\u5408\u3001\u30ad\u30e3\u30c3\u30b7\u30e5\u304c\u52b9\u3044\u3066\u3044\u308b\u305f\u3081\u5909\u66f4\u304c\u53cd\u6620\u3055\u308c\u307e\u305b\u3093\u3002 \u3053\u306e\u3088\u3046\u306a\u5834\u5408\u306b\u306f SqlParser.ClearCache(path/to/sqlfile) \u3092\u30b7\u30b9\u30c6\u30e0\u7ba1\u7406\u8005\u304b\u3089\u5b9f\u884c\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u304a\u3051\u3070\u3001SQL\u30d5\u30a1\u30a4\u30eb\u306e\u307f\u306e\u4fee\u6b63\u304c\u53ef\u80fd\u3068\u306a\u308a\u307e\u3059\u3002 Warning \u30ad\u30e3\u30c3\u30b7\u30e5\u30af\u30ea\u30a2\u6a5f\u80fd\u306f\u88dc\u52a9\u7684\u306a\u3082\u306e\u3068\u8003\u3048\u3001\u53ef\u80fd\u306a\u9650\u308a\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30b5\u30fc\u30d0\u3092\u518d\u8d77\u52d5\u3057\u3066\u304f\u3060\u3055\u3044","title":"\u30ad\u30e3\u30c3\u30b7\u30e5"},{"location":"ja/expression/","text":"\u5f0f\u8a00\u8a9e \u6982\u8981 SQL\u4e2d\u306e\u5f0f\u30b3\u30e1\u30f3\u30c8\u306b\u306f\u7c21\u6613\u306a\u5f0f\u3092\u8a18\u8ff0\u3067\u304d\u307e\u3059\u3002 \u6587\u6cd5\u306fC#\u3068\u307b\u3068\u3093\u3069\u540c\u3058\u3067\u3059\u3002 \u305f\u3060\u3057\u3001C#\u3067\u53ef\u80fd\u306a\u3053\u3068\u3059\u3079\u3066\u304c\u3067\u304d\u308b\u308f\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002 Warning DOMA\u3067\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308b\u4e0b\u8a18\u306e\u6a5f\u80fd\u306fEasySqlParser\u3067\u306f\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u307e\u305b\u3093 \u7b97\u8853\u6f14\u7b97\u5b50 \u9023\u7d50\u6f14\u7b97\u5b50 \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u306e\u547c\u3073\u51fa\u3057 \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u30d5\u30a3\u30fc\u30eb\u30c9\u3078\u306e\u30a2\u30af\u30bb\u30b9 static\u30e1\u30bd\u30c3\u30c9\u306e\u547c\u3073\u51fa\u3057 static\u30d5\u30a3\u30fc\u30eb\u30c9\u3078\u306e\u30a2\u30af\u30bb\u30b9 \u30ab\u30b9\u30bf\u30e0\u95a2\u6570\u306e\u4f7f\u7528 \u30ea\u30c6\u30e9\u30eb EasySqlParser\u3067\u306f\u4ee5\u4e0b\u306e\u30ea\u30c6\u30e9\u30eb\u304c\u5229\u7528\u3067\u304d\u307e\u3059 \u30ea\u30c6\u30e9\u30eb \u578b null - true bool false bool 10 int 10L long 0.123F float 0.123D double 0.123M decimal 10U uint 10UL ulong \"a\" string \u6570\u5024\u306e\u578b\u306f\u3001\u30ea\u30c6\u30e9\u30eb\u306e\u6700\u5f8c\u306b L \u3084 F \u306a\u3069\u306e\u30b5\u30d5\u30a3\u30c3\u30af\u30b9\u3092\u4ed8\u4e0e\u3057\u3066\u533a\u5225\u3057\u307e\u3059\u3002 \u30b5\u30d5\u30a3\u30c3\u30af\u30b9\u306f\u5927\u6587\u5b57\u3067\u306a\u3051\u308c\u3070\u3044\u3051\u307e\u305b\u3093\u3002 SELECT t0.BusinessEntityID , t1.FirstName , t1.MiddleName , t1.LastName , t0.BirthDate , t0.MaritalStatus , t0.Gender , t0.HireDate FROM HumanResources.Employee t0 INNER JOIN Person.Person t1 ON t0.BusinessEntityID = t1.BusinessEntityID WHERE /*%if MiddleNames != null && MiddleNames.Count > 0 */ t1.MiddleName IN /* MiddleNames */ ( 'M' ) /*%end*/ \u6bd4\u8f03\u6f14\u7b97\u5b50 EasySqlParser\u3067\u306f\u4ee5\u4e0b\u306e\u6bd4\u8f03\u6f14\u7b97\u5b50\u304c\u5229\u7528\u3067\u304d\u307e\u3059 \u6f14\u7b97\u5b50 \u8aac\u660e == \u7b49\u5024\u6f14\u7b97\u5b50 != \u4e0d\u7b49\u5024\u6f14\u7b97\u5b50 1 < \u5c0f\u306a\u308a\u6f14\u7b97\u5b50 <= \u5c0f\u306a\u308a\u30a4\u30b3\u30fc\u30eb\u6f14\u7b97\u5b50 > \u5927\u306a\u308a\u6f14\u7b97\u5b50 >= \u5927\u306a\u308a\u30a4\u30b3\u30fc\u30eb\u6f14\u7b97\u5b50 SELECT * FROM HumanResources.Employee WHERE /*%if BusinessEntityID > 0 */ BusinessEntityID = /* BusinessEntityID */ 1 /*%end*/ \u8ad6\u7406\u6f14\u7b97\u5b50 EasySqlParser\u3067\u306f\u4ee5\u4e0b\u306e\u8ad6\u7406\u6f14\u7b97\u5b50\u304c\u5229\u7528\u3067\u304d\u307e\u3059 \u6f14\u7b97\u5b50 \u8aac\u660e ! \u8ad6\u7406\u5426\u5b9a\u6f14\u7b97\u5b50 && \u8ad6\u7406\u7a4d\u6f14\u7b97\u5b50 || \u8ad6\u7406\u548c\u6f14\u7b97\u5b50 \u62ec\u5f27\u3092\u4f7f\u3063\u3066\u3001\u6f14\u7b97\u5b50\u304c\u9069\u7528\u3055\u308c\u308b\u512a\u5148\u5ea6\u3092\u5236\u5fa1\u3067\u304d\u307e\u3059\u3002 SELECT t0. * FROM HumanResources.Employee t0 INNER JOIN HumanResources.EmployeeDepartmentHistory t1 ON t0.BusinessEntityID = t1.BusinessEntityID INNER JOIN HumanResources.Department t2 ON t1.DepartmentID = t2.DepartmentID INNER JOIN Person.Person t3 ON t0.BusinessEntityID = t3.BusinessEntityID WHERE /*%if (BusinessEntityID == null || DepartmentID == null) && FirstName != null */ t3.FirstName = /* FirstName */ 'smith' /*%end*/ \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u30d7\u30ed\u30d1\u30c6\u30a3\u3078\u306e\u30a2\u30af\u30bb\u30b9 \u30c9\u30c3\u30c8 . \u3067\u533a\u5207\u3063\u3066\u30d7\u30ed\u30d1\u30c6\u30a3\u540d\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u3059\u3002 \u53ef\u8996\u6027\u306fpublic\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002 SELECT t0.BusinessEntityID , t1.FirstName , t1.MiddleName , t1.LastName , t0.BirthDate , t0.MaritalStatus , t0.Gender , t0.HireDate FROM HumanResources.Employee t0 INNER JOIN Person.Person t1 ON t0.BusinessEntityID = t1.BusinessEntityID WHERE /*%if MiddleNames != null && MiddleNames.Count > 0 */ t1.MiddleName IN /* MiddleNames */ ( 'M' ) /*%end*/ \u7d44\u307f\u8fbc\u307f\u95a2\u6570\u306e\u4f7f\u7528 \u7d44\u307f\u8fbc\u307f\u95a2\u6570\u306f\u3001\u4e3b\u306b\u3001SQL\u306b\u30d0\u30a4\u30f3\u30c9\u3059\u308b\u524d\u306b\u30d0\u30a4\u30f3\u30c9\u5909\u6570\u306e\u5024\u3092\u5909\u66f4\u3059\u308b\u305f\u3081\u306e\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u3067\u3059\u3002 \u305f\u3068\u3048\u3070\u3001LIKE\u53e5\u3067\u524d\u65b9\u4e00\u81f4\u691c\u7d22\u3092\u884c\u3046\u5834\u5408\u306b\u6b21\u306e\u3088\u3046\u306b\u8a18\u8ff0\u3067\u304d\u307e\u3059\u3002 SELECT t0.BusinessEntityID , t1.FirstName , t1.MiddleName , t1.LastName , t0.BirthDate , t0.MaritalStatus , t0.Gender , t0.HireDate FROM HumanResources.Employee t0 INNER JOIN Person.Person t1 ON t0.BusinessEntityID = t1.BusinessEntityID WHERE /*%if FirstName != null && FirstName != \"\" */ t1.FirstName LIKE /* @StartsWith(FirstName) */ 'A%' /*%end*/ ORDER BY t0.BusinessEntityID EasySqlParser\u3067\u306f\u4ee5\u4e0b\u306e\u7d44\u307f\u8fbc\u307f\u95a2\u6570\u304c\u5229\u7528\u3067\u304d\u307e\u3059 \u623b\u308a\u5024\u306e\u578b \u95a2\u6570\u540d\u3068\u30d1\u30e9\u30e1\u30fc\u30bf \u6982\u8981 string @Escape(string text) LIKE\u6f14\u7b97\u306e\u305f\u3081\u306e\u30a8\u30b9\u30b1\u30fc\u30d7\u3092\u884c\u3046\u3053\u3068\u3092\u793a\u3057\u307e\u3059\u3002 \u623b\u308a\u5024\u306f\u5165\u529b\u5024\u3092\u30a8\u30b9\u30b1\u30fc\u30d7\u3057\u305f\u6587\u5b57\u5217\u3067\u3059\u3002 \u30a8\u30b9\u30b1\u30fc\u30d7\u306b\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30a8\u30b9\u30b1\u30fc\u30d7\u6587\u5b57\uff08$\uff09\u3092\u7528\u3044\u3066\u884c\u308f\u308c\u307e\u3059\u3002 \u5f15\u6570\u306bnull\u3092\u6e21\u3057\u305f\u5834\u5408\u3001null\u3092\u8fd4\u3057\u307e\u3059\u3002 string @Escape(string text, char escapeChar) LIKE\u6f14\u7b97\u306e\u305f\u3081\u306e\u30a8\u30b9\u30b1\u30fc\u30d7\u3092\u884c\u3046\u3053\u3068\u3092\u793a\u3057\u307e\u3059\u3002 \u623b\u308a\u5024\u306f\u5165\u529b\u5024\u3092\u30a8\u30b9\u30b1\u30fc\u30d7\u3057\u305f\u6587\u5b57\u5217\u3067\u3059\u3002 \u30a8\u30b9\u30b1\u30fc\u30d7\u306f\u7b2c2\u5f15\u6570\u3067\u6307\u5b9a\u3057\u305f\u30a8\u30b9\u30b1\u30fc\u30d7\u6587\u5b57\u3092\u7528\u3044\u3066\u884c\u308f\u308c\u307e\u3059\u3002 \u6700\u521d\u306e\u5f15\u6570\u306bnull\u3092\u6e21\u3057\u305f\u5834\u5408\u3001null\u3092\u8fd4\u3057\u307e\u3059\u3002 string @StartsWith(string text) \u524d\u65b9\u4e00\u81f4\u691c\u7d22\u3092\u884c\u3046\u3053\u3068\u3092\u793a\u3057\u307e\u3059\u3002 \u623b\u308a\u5024\u306f\u5165\u529b\u5024\u3092\u30a8\u30b9\u30b1\u30fc\u30d7\u3057\u30ef\u30a4\u30eb\u30c9\u30ab\u30fc\u30c9\u3092\u5f8c\u308d\u306b\u4ed8\u4e0e\u3057\u305f\u6587\u5b57\u5217\u3067\u3059\u3002 \u30a8\u30b9\u30b1\u30fc\u30d7\u306b\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30a8\u30b9\u30b1\u30fc\u30d7\u6587\u5b57\uff08$\uff09\u3092\u7528\u3044\u3066\u884c\u308f\u308c\u307e\u3059\u3002 \u5f15\u6570\u306bnull\u3092\u6e21\u3057\u305f\u5834\u5408\u3001null\u3092\u8fd4\u3057\u307e\u3059\u3002 string @StartsWith(string text, char escapeChar) \u524d\u65b9\u4e00\u81f4\u691c\u7d22\u3092\u884c\u3046\u3053\u3068\u3092\u793a\u3057\u307e\u3059\u3002 \u623b\u308a\u5024\u306f\u5165\u529b\u5024\u3092\u30a8\u30b9\u30b1\u30fc\u30d7\u3057\u30ef\u30a4\u30eb\u30c9\u30ab\u30fc\u30c9\u3092\u5f8c\u308d\u306b\u4ed8\u4e0e\u3057\u305f\u6587\u5b57\u5217\u3067\u3059\u3002 \u30a8\u30b9\u30b1\u30fc\u30d7\u306f\u7b2c2\u5f15\u6570\u3067\u6307\u5b9a\u3057\u305f\u30a8\u30b9\u30b1\u30fc\u30d7\u6587\u5b57\u3092\u7528\u3044\u3066\u884c\u308f\u308c\u307e\u3059\u3002 \u6700\u521d\u306e\u5f15\u6570\u306bnull\u3092\u6e21\u3057\u305f\u5834\u5408\u3001null\u3092\u8fd4\u3057\u307e\u3059\u3002 string @Contains(string text) \u4e2d\u9593\u4e00\u81f4\u691c\u7d22\u3092\u884c\u3046\u3053\u3068\u3092\u793a\u3057\u307e\u3059\u3002 \u623b\u308a\u5024\u306f\u5165\u529b\u5024\u3092\u30a8\u30b9\u30b1\u30fc\u30d7\u3057\u30ef\u30a4\u30eb\u30c9\u30ab\u30fc\u30c9\u3092\u524d\u3068\u5f8c\u308d\u306b\u4ed8\u4e0e\u3057\u305f\u6587\u5b57\u5217\u3067\u3059\u3002 \u30a8\u30b9\u30b1\u30fc\u30d7\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30a8\u30b9\u30b1\u30fc\u30d7\u6587\u5b57\uff08$\uff09\u3092\u7528\u3044\u3066\u884c\u308f\u308c\u307e\u3059\u3002 \u5f15\u6570\u306bnull\u3092\u6e21\u3057\u305f\u5834\u5408\u3001null\u3092\u8fd4\u3057\u307e\u3059\u3002 string @Contains(string text, char escapeChar) \u4e2d\u9593\u4e00\u81f4\u691c\u7d22\u3092\u884c\u3046\u3053\u3068\u3092\u793a\u3057\u307e\u3059\u3002 \u623b\u308a\u5024\u306f\u5165\u529b\u5024\u3092\u30a8\u30b9\u30b1\u30fc\u30d7\u3057\u30ef\u30a4\u30eb\u30c9\u30ab\u30fc\u30c9\u3092\u524d\u3068\u5f8c\u308d\u306b\u4ed8\u4e0e\u3057\u305f\u6587\u5b57\u5217\u3067\u3059\u3002 \u30a8\u30b9\u30b1\u30fc\u30d7\u306f\u7b2c2\u5f15\u6570\u3067\u6307\u5b9a\u3057\u305f\u30a8\u30b9\u30b1\u30fc\u30d7\u6587\u5b57\u3092\u7528\u3044\u3066\u884c\u308f\u308c\u307e\u3059\u3002 \u6700\u521d\u306e\u5f15\u6570\u306bnull\u3092\u6e21\u3057\u305f\u5834\u5408\u3001null\u3092\u8fd4\u3057\u307e\u3059\u3002 string @EndsWith(string text) \u5f8c\u65b9\u4e00\u81f4\u691c\u7d22\u3092\u884c\u3046\u3053\u3068\u3092\u793a\u3057\u307e\u3059\u3002 \u623b\u308a\u5024\u306f\u5165\u529b\u5024\u3092\u30a8\u30b9\u30b1\u30fc\u30d7\u3057\u30ef\u30a4\u30eb\u30c9\u30ab\u30fc\u30c9\u3092\u524d\u306b\u4ed8\u4e0e\u3057\u305f\u6587\u5b57\u5217\u3067\u3059\u3002 \u30a8\u30b9\u30b1\u30fc\u30d7\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30a8\u30b9\u30b1\u30fc\u30d7\u6587\u5b57\uff08$\uff09\u3092\u7528\u3044\u3066\u884c\u308f\u308c\u307e\u3059\u3002 \u5f15\u6570\u306bnull\u3092\u6e21\u3057\u305f\u5834\u5408\u3001null\u3092\u8fd4\u3057\u307e\u3059\u3002 string @EndsWith(string text, char escapeChar) \u5f8c\u65b9\u4e00\u81f4\u691c\u7d22\u3092\u884c\u3046\u3053\u3068\u3092\u793a\u3057\u307e\u3059\u3002 \u623b\u308a\u5024\u306f\u5165\u529b\u5024\u3092\u30a8\u30b9\u30b1\u30fc\u30d7\u3057\u30ef\u30a4\u30eb\u30c9\u30ab\u30fc\u30c9\u3092\u524d\u306b\u4ed8\u4e0e\u3057\u305f\u6587\u5b57\u5217\u3067\u3059\u3002 \u30a8\u30b9\u30b1\u30fc\u30d7\u306f\u7b2c2\u5f15\u6570\u3067\u6307\u5b9a\u3057\u305f\u30a8\u30b9\u30b1\u30fc\u30d7\u6587\u5b57\u3092\u7528\u3044\u3066\u884c\u308f\u308c\u307e\u3059\u3002 \u6700\u521d\u306e\u5f15\u6570\u306bnull\u3092\u6e21\u3057\u305f\u5834\u5408\u3001null\u3092\u8fd4\u3057\u307e\u3059\u3002 DateTime @TruncateTime(DateTime dateTime) \u6642\u523b\u90e8\u5206\u3092\u5207\u308a\u6368\u3066\u308b\u3053\u3068\u3092\u793a\u3057\u307e\u3059\u3002 \u623b\u308a\u5024\u306f\u6642\u523b\u90e8\u5206\u304c\u5207\u308a\u6368\u3066\u3089\u308c\u305f\u65b0\u3057\u3044\u65e5\u4ed8\u3067\u3059\u3002 \u5f15\u6570\u306bnull\u3092\u6e21\u3057\u305f\u5834\u5408\u3001null\u3092\u8fd4\u3057\u307e\u3059\u3002 DateTimeOffset @TruncateTime(DateTimeOffset dateTimeOffset) \u6642\u523b\u90e8\u5206\u3092\u5207\u308a\u6368\u3066\u308b\u3053\u3068\u3092\u793a\u3057\u307e\u3059\u3002 \u623b\u308a\u5024\u306f\u6642\u523b\u90e8\u5206\u304c\u5207\u308a\u6368\u3066\u3089\u308c\u305f\u65b0\u3057\u3044\u65e5\u4ed8\u3067\u3059\u3002 \u5f15\u6570\u306bnull\u3092\u6e21\u3057\u305f\u5834\u5408\u3001null\u3092\u8fd4\u3057\u307e\u3059\u3002 \u4e0d\u7b49\u6f14\u7b97\u5b50\u306f <> \u3067\u3082\u53ef \u21a9","title":"\u5f0f\u8a00\u8a9e"},{"location":"ja/expression/#_1","text":"","title":"\u5f0f\u8a00\u8a9e"},{"location":"ja/expression/#_2","text":"SQL\u4e2d\u306e\u5f0f\u30b3\u30e1\u30f3\u30c8\u306b\u306f\u7c21\u6613\u306a\u5f0f\u3092\u8a18\u8ff0\u3067\u304d\u307e\u3059\u3002 \u6587\u6cd5\u306fC#\u3068\u307b\u3068\u3093\u3069\u540c\u3058\u3067\u3059\u3002 \u305f\u3060\u3057\u3001C#\u3067\u53ef\u80fd\u306a\u3053\u3068\u3059\u3079\u3066\u304c\u3067\u304d\u308b\u308f\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002 Warning DOMA\u3067\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308b\u4e0b\u8a18\u306e\u6a5f\u80fd\u306fEasySqlParser\u3067\u306f\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u307e\u305b\u3093 \u7b97\u8853\u6f14\u7b97\u5b50 \u9023\u7d50\u6f14\u7b97\u5b50 \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u306e\u547c\u3073\u51fa\u3057 \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u30d5\u30a3\u30fc\u30eb\u30c9\u3078\u306e\u30a2\u30af\u30bb\u30b9 static\u30e1\u30bd\u30c3\u30c9\u306e\u547c\u3073\u51fa\u3057 static\u30d5\u30a3\u30fc\u30eb\u30c9\u3078\u306e\u30a2\u30af\u30bb\u30b9 \u30ab\u30b9\u30bf\u30e0\u95a2\u6570\u306e\u4f7f\u7528","title":"\u6982\u8981"},{"location":"ja/expression/#_3","text":"EasySqlParser\u3067\u306f\u4ee5\u4e0b\u306e\u30ea\u30c6\u30e9\u30eb\u304c\u5229\u7528\u3067\u304d\u307e\u3059 \u30ea\u30c6\u30e9\u30eb \u578b null - true bool false bool 10 int 10L long 0.123F float 0.123D double 0.123M decimal 10U uint 10UL ulong \"a\" string \u6570\u5024\u306e\u578b\u306f\u3001\u30ea\u30c6\u30e9\u30eb\u306e\u6700\u5f8c\u306b L \u3084 F \u306a\u3069\u306e\u30b5\u30d5\u30a3\u30c3\u30af\u30b9\u3092\u4ed8\u4e0e\u3057\u3066\u533a\u5225\u3057\u307e\u3059\u3002 \u30b5\u30d5\u30a3\u30c3\u30af\u30b9\u306f\u5927\u6587\u5b57\u3067\u306a\u3051\u308c\u3070\u3044\u3051\u307e\u305b\u3093\u3002 SELECT t0.BusinessEntityID , t1.FirstName , t1.MiddleName , t1.LastName , t0.BirthDate , t0.MaritalStatus , t0.Gender , t0.HireDate FROM HumanResources.Employee t0 INNER JOIN Person.Person t1 ON t0.BusinessEntityID = t1.BusinessEntityID WHERE /*%if MiddleNames != null && MiddleNames.Count > 0 */ t1.MiddleName IN /* MiddleNames */ ( 'M' ) /*%end*/","title":"\u30ea\u30c6\u30e9\u30eb"},{"location":"ja/expression/#_4","text":"EasySqlParser\u3067\u306f\u4ee5\u4e0b\u306e\u6bd4\u8f03\u6f14\u7b97\u5b50\u304c\u5229\u7528\u3067\u304d\u307e\u3059 \u6f14\u7b97\u5b50 \u8aac\u660e == \u7b49\u5024\u6f14\u7b97\u5b50 != \u4e0d\u7b49\u5024\u6f14\u7b97\u5b50 1 < \u5c0f\u306a\u308a\u6f14\u7b97\u5b50 <= \u5c0f\u306a\u308a\u30a4\u30b3\u30fc\u30eb\u6f14\u7b97\u5b50 > \u5927\u306a\u308a\u6f14\u7b97\u5b50 >= \u5927\u306a\u308a\u30a4\u30b3\u30fc\u30eb\u6f14\u7b97\u5b50 SELECT * FROM HumanResources.Employee WHERE /*%if BusinessEntityID > 0 */ BusinessEntityID = /* BusinessEntityID */ 1 /*%end*/","title":"\u6bd4\u8f03\u6f14\u7b97\u5b50"},{"location":"ja/expression/#_5","text":"EasySqlParser\u3067\u306f\u4ee5\u4e0b\u306e\u8ad6\u7406\u6f14\u7b97\u5b50\u304c\u5229\u7528\u3067\u304d\u307e\u3059 \u6f14\u7b97\u5b50 \u8aac\u660e ! \u8ad6\u7406\u5426\u5b9a\u6f14\u7b97\u5b50 && \u8ad6\u7406\u7a4d\u6f14\u7b97\u5b50 || \u8ad6\u7406\u548c\u6f14\u7b97\u5b50 \u62ec\u5f27\u3092\u4f7f\u3063\u3066\u3001\u6f14\u7b97\u5b50\u304c\u9069\u7528\u3055\u308c\u308b\u512a\u5148\u5ea6\u3092\u5236\u5fa1\u3067\u304d\u307e\u3059\u3002 SELECT t0. * FROM HumanResources.Employee t0 INNER JOIN HumanResources.EmployeeDepartmentHistory t1 ON t0.BusinessEntityID = t1.BusinessEntityID INNER JOIN HumanResources.Department t2 ON t1.DepartmentID = t2.DepartmentID INNER JOIN Person.Person t3 ON t0.BusinessEntityID = t3.BusinessEntityID WHERE /*%if (BusinessEntityID == null || DepartmentID == null) && FirstName != null */ t3.FirstName = /* FirstName */ 'smith' /*%end*/","title":"\u8ad6\u7406\u6f14\u7b97\u5b50"},{"location":"ja/expression/#_6","text":"\u30c9\u30c3\u30c8 . \u3067\u533a\u5207\u3063\u3066\u30d7\u30ed\u30d1\u30c6\u30a3\u540d\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u3059\u3002 \u53ef\u8996\u6027\u306fpublic\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002 SELECT t0.BusinessEntityID , t1.FirstName , t1.MiddleName , t1.LastName , t0.BirthDate , t0.MaritalStatus , t0.Gender , t0.HireDate FROM HumanResources.Employee t0 INNER JOIN Person.Person t1 ON t0.BusinessEntityID = t1.BusinessEntityID WHERE /*%if MiddleNames != null && MiddleNames.Count > 0 */ t1.MiddleName IN /* MiddleNames */ ( 'M' ) /*%end*/","title":"\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u30d7\u30ed\u30d1\u30c6\u30a3\u3078\u306e\u30a2\u30af\u30bb\u30b9"},{"location":"ja/expression/#_7","text":"\u7d44\u307f\u8fbc\u307f\u95a2\u6570\u306f\u3001\u4e3b\u306b\u3001SQL\u306b\u30d0\u30a4\u30f3\u30c9\u3059\u308b\u524d\u306b\u30d0\u30a4\u30f3\u30c9\u5909\u6570\u306e\u5024\u3092\u5909\u66f4\u3059\u308b\u305f\u3081\u306e\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u3067\u3059\u3002 \u305f\u3068\u3048\u3070\u3001LIKE\u53e5\u3067\u524d\u65b9\u4e00\u81f4\u691c\u7d22\u3092\u884c\u3046\u5834\u5408\u306b\u6b21\u306e\u3088\u3046\u306b\u8a18\u8ff0\u3067\u304d\u307e\u3059\u3002 SELECT t0.BusinessEntityID , t1.FirstName , t1.MiddleName , t1.LastName , t0.BirthDate , t0.MaritalStatus , t0.Gender , t0.HireDate FROM HumanResources.Employee t0 INNER JOIN Person.Person t1 ON t0.BusinessEntityID = t1.BusinessEntityID WHERE /*%if FirstName != null && FirstName != \"\" */ t1.FirstName LIKE /* @StartsWith(FirstName) */ 'A%' /*%end*/ ORDER BY t0.BusinessEntityID EasySqlParser\u3067\u306f\u4ee5\u4e0b\u306e\u7d44\u307f\u8fbc\u307f\u95a2\u6570\u304c\u5229\u7528\u3067\u304d\u307e\u3059 \u623b\u308a\u5024\u306e\u578b \u95a2\u6570\u540d\u3068\u30d1\u30e9\u30e1\u30fc\u30bf \u6982\u8981 string @Escape(string text) LIKE\u6f14\u7b97\u306e\u305f\u3081\u306e\u30a8\u30b9\u30b1\u30fc\u30d7\u3092\u884c\u3046\u3053\u3068\u3092\u793a\u3057\u307e\u3059\u3002 \u623b\u308a\u5024\u306f\u5165\u529b\u5024\u3092\u30a8\u30b9\u30b1\u30fc\u30d7\u3057\u305f\u6587\u5b57\u5217\u3067\u3059\u3002 \u30a8\u30b9\u30b1\u30fc\u30d7\u306b\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30a8\u30b9\u30b1\u30fc\u30d7\u6587\u5b57\uff08$\uff09\u3092\u7528\u3044\u3066\u884c\u308f\u308c\u307e\u3059\u3002 \u5f15\u6570\u306bnull\u3092\u6e21\u3057\u305f\u5834\u5408\u3001null\u3092\u8fd4\u3057\u307e\u3059\u3002 string @Escape(string text, char escapeChar) LIKE\u6f14\u7b97\u306e\u305f\u3081\u306e\u30a8\u30b9\u30b1\u30fc\u30d7\u3092\u884c\u3046\u3053\u3068\u3092\u793a\u3057\u307e\u3059\u3002 \u623b\u308a\u5024\u306f\u5165\u529b\u5024\u3092\u30a8\u30b9\u30b1\u30fc\u30d7\u3057\u305f\u6587\u5b57\u5217\u3067\u3059\u3002 \u30a8\u30b9\u30b1\u30fc\u30d7\u306f\u7b2c2\u5f15\u6570\u3067\u6307\u5b9a\u3057\u305f\u30a8\u30b9\u30b1\u30fc\u30d7\u6587\u5b57\u3092\u7528\u3044\u3066\u884c\u308f\u308c\u307e\u3059\u3002 \u6700\u521d\u306e\u5f15\u6570\u306bnull\u3092\u6e21\u3057\u305f\u5834\u5408\u3001null\u3092\u8fd4\u3057\u307e\u3059\u3002 string @StartsWith(string text) \u524d\u65b9\u4e00\u81f4\u691c\u7d22\u3092\u884c\u3046\u3053\u3068\u3092\u793a\u3057\u307e\u3059\u3002 \u623b\u308a\u5024\u306f\u5165\u529b\u5024\u3092\u30a8\u30b9\u30b1\u30fc\u30d7\u3057\u30ef\u30a4\u30eb\u30c9\u30ab\u30fc\u30c9\u3092\u5f8c\u308d\u306b\u4ed8\u4e0e\u3057\u305f\u6587\u5b57\u5217\u3067\u3059\u3002 \u30a8\u30b9\u30b1\u30fc\u30d7\u306b\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30a8\u30b9\u30b1\u30fc\u30d7\u6587\u5b57\uff08$\uff09\u3092\u7528\u3044\u3066\u884c\u308f\u308c\u307e\u3059\u3002 \u5f15\u6570\u306bnull\u3092\u6e21\u3057\u305f\u5834\u5408\u3001null\u3092\u8fd4\u3057\u307e\u3059\u3002 string @StartsWith(string text, char escapeChar) \u524d\u65b9\u4e00\u81f4\u691c\u7d22\u3092\u884c\u3046\u3053\u3068\u3092\u793a\u3057\u307e\u3059\u3002 \u623b\u308a\u5024\u306f\u5165\u529b\u5024\u3092\u30a8\u30b9\u30b1\u30fc\u30d7\u3057\u30ef\u30a4\u30eb\u30c9\u30ab\u30fc\u30c9\u3092\u5f8c\u308d\u306b\u4ed8\u4e0e\u3057\u305f\u6587\u5b57\u5217\u3067\u3059\u3002 \u30a8\u30b9\u30b1\u30fc\u30d7\u306f\u7b2c2\u5f15\u6570\u3067\u6307\u5b9a\u3057\u305f\u30a8\u30b9\u30b1\u30fc\u30d7\u6587\u5b57\u3092\u7528\u3044\u3066\u884c\u308f\u308c\u307e\u3059\u3002 \u6700\u521d\u306e\u5f15\u6570\u306bnull\u3092\u6e21\u3057\u305f\u5834\u5408\u3001null\u3092\u8fd4\u3057\u307e\u3059\u3002 string @Contains(string text) \u4e2d\u9593\u4e00\u81f4\u691c\u7d22\u3092\u884c\u3046\u3053\u3068\u3092\u793a\u3057\u307e\u3059\u3002 \u623b\u308a\u5024\u306f\u5165\u529b\u5024\u3092\u30a8\u30b9\u30b1\u30fc\u30d7\u3057\u30ef\u30a4\u30eb\u30c9\u30ab\u30fc\u30c9\u3092\u524d\u3068\u5f8c\u308d\u306b\u4ed8\u4e0e\u3057\u305f\u6587\u5b57\u5217\u3067\u3059\u3002 \u30a8\u30b9\u30b1\u30fc\u30d7\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30a8\u30b9\u30b1\u30fc\u30d7\u6587\u5b57\uff08$\uff09\u3092\u7528\u3044\u3066\u884c\u308f\u308c\u307e\u3059\u3002 \u5f15\u6570\u306bnull\u3092\u6e21\u3057\u305f\u5834\u5408\u3001null\u3092\u8fd4\u3057\u307e\u3059\u3002 string @Contains(string text, char escapeChar) \u4e2d\u9593\u4e00\u81f4\u691c\u7d22\u3092\u884c\u3046\u3053\u3068\u3092\u793a\u3057\u307e\u3059\u3002 \u623b\u308a\u5024\u306f\u5165\u529b\u5024\u3092\u30a8\u30b9\u30b1\u30fc\u30d7\u3057\u30ef\u30a4\u30eb\u30c9\u30ab\u30fc\u30c9\u3092\u524d\u3068\u5f8c\u308d\u306b\u4ed8\u4e0e\u3057\u305f\u6587\u5b57\u5217\u3067\u3059\u3002 \u30a8\u30b9\u30b1\u30fc\u30d7\u306f\u7b2c2\u5f15\u6570\u3067\u6307\u5b9a\u3057\u305f\u30a8\u30b9\u30b1\u30fc\u30d7\u6587\u5b57\u3092\u7528\u3044\u3066\u884c\u308f\u308c\u307e\u3059\u3002 \u6700\u521d\u306e\u5f15\u6570\u306bnull\u3092\u6e21\u3057\u305f\u5834\u5408\u3001null\u3092\u8fd4\u3057\u307e\u3059\u3002 string @EndsWith(string text) \u5f8c\u65b9\u4e00\u81f4\u691c\u7d22\u3092\u884c\u3046\u3053\u3068\u3092\u793a\u3057\u307e\u3059\u3002 \u623b\u308a\u5024\u306f\u5165\u529b\u5024\u3092\u30a8\u30b9\u30b1\u30fc\u30d7\u3057\u30ef\u30a4\u30eb\u30c9\u30ab\u30fc\u30c9\u3092\u524d\u306b\u4ed8\u4e0e\u3057\u305f\u6587\u5b57\u5217\u3067\u3059\u3002 \u30a8\u30b9\u30b1\u30fc\u30d7\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30a8\u30b9\u30b1\u30fc\u30d7\u6587\u5b57\uff08$\uff09\u3092\u7528\u3044\u3066\u884c\u308f\u308c\u307e\u3059\u3002 \u5f15\u6570\u306bnull\u3092\u6e21\u3057\u305f\u5834\u5408\u3001null\u3092\u8fd4\u3057\u307e\u3059\u3002 string @EndsWith(string text, char escapeChar) \u5f8c\u65b9\u4e00\u81f4\u691c\u7d22\u3092\u884c\u3046\u3053\u3068\u3092\u793a\u3057\u307e\u3059\u3002 \u623b\u308a\u5024\u306f\u5165\u529b\u5024\u3092\u30a8\u30b9\u30b1\u30fc\u30d7\u3057\u30ef\u30a4\u30eb\u30c9\u30ab\u30fc\u30c9\u3092\u524d\u306b\u4ed8\u4e0e\u3057\u305f\u6587\u5b57\u5217\u3067\u3059\u3002 \u30a8\u30b9\u30b1\u30fc\u30d7\u306f\u7b2c2\u5f15\u6570\u3067\u6307\u5b9a\u3057\u305f\u30a8\u30b9\u30b1\u30fc\u30d7\u6587\u5b57\u3092\u7528\u3044\u3066\u884c\u308f\u308c\u307e\u3059\u3002 \u6700\u521d\u306e\u5f15\u6570\u306bnull\u3092\u6e21\u3057\u305f\u5834\u5408\u3001null\u3092\u8fd4\u3057\u307e\u3059\u3002 DateTime @TruncateTime(DateTime dateTime) \u6642\u523b\u90e8\u5206\u3092\u5207\u308a\u6368\u3066\u308b\u3053\u3068\u3092\u793a\u3057\u307e\u3059\u3002 \u623b\u308a\u5024\u306f\u6642\u523b\u90e8\u5206\u304c\u5207\u308a\u6368\u3066\u3089\u308c\u305f\u65b0\u3057\u3044\u65e5\u4ed8\u3067\u3059\u3002 \u5f15\u6570\u306bnull\u3092\u6e21\u3057\u305f\u5834\u5408\u3001null\u3092\u8fd4\u3057\u307e\u3059\u3002 DateTimeOffset @TruncateTime(DateTimeOffset dateTimeOffset) \u6642\u523b\u90e8\u5206\u3092\u5207\u308a\u6368\u3066\u308b\u3053\u3068\u3092\u793a\u3057\u307e\u3059\u3002 \u623b\u308a\u5024\u306f\u6642\u523b\u90e8\u5206\u304c\u5207\u308a\u6368\u3066\u3089\u308c\u305f\u65b0\u3057\u3044\u65e5\u4ed8\u3067\u3059\u3002 \u5f15\u6570\u306bnull\u3092\u6e21\u3057\u305f\u5834\u5408\u3001null\u3092\u8fd4\u3057\u307e\u3059\u3002 \u4e0d\u7b49\u6f14\u7b97\u5b50\u306f <> \u3067\u3082\u53ef \u21a9","title":"\u7d44\u307f\u8fbc\u307f\u95a2\u6570\u306e\u4f7f\u7528"},{"location":"ja/sql/","text":"SQL Note DOMA\u7d4c\u9a13\u8005\u306fWarning\u30c8\u30d4\u30c3\u30af\u306b\u6ce8\u76ee\u3057\u306a\u304c\u3089\u6d41\u3057\u8aad\u307f\u3057\u3066\u304f\u3060\u3055\u3044 DOMA\u306f\u672a\u7d4c\u9a13\u3060\u304c\u3001S2Dao\u30fbS2Jdbc\u306a\u3069DOMA\u4ee5\u5916\u306e2-way-sql\u30e9\u30a4\u30d6\u30e9\u30ea\u7d4c\u9a13\u8005\u306f\u5168\u4f53\u3092\u6d41\u3057\u8aad\u307f\u3057\u3066\u304f\u3060\u3055\u3044 \u6982\u8981 2-way-sql\u306f\u901a\u5e38\u306eSQL\u6587\u306b\u4e00\u5473\u52a0\u3048\u308b\u3053\u3068\u3067\u4ee5\u4e0b\u306e\u3053\u3068\u304c\u53ef\u80fd\u3068\u306a\u308a\u307e\u3059 \u30b3\u30e1\u30f3\u30c8\u3068\u30d0\u30a4\u30f3\u30c9\u5909\u6570\u3067\u52d5\u7684\u306aSQL\u306e\u7d44\u307f\u7acb\u3066\u308b \u30d0\u30a4\u30f3\u30c9\u5909\u6570\u306b\u5bfe\u3059\u308b\u30c6\u30b9\u30c8\u7528\u30c7\u30fc\u30bf\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067SQL Server Management Studio\u3001SQL Developer\u3001A5:SQL Mk-2\u3001DBeaver\u306a\u3069\u3068\u3044\u3063\u305f\u30c4\u30fc\u30eb\u304b\u3089SQL\u3092\u5b9f\u884c\u3059\u308b SQL\u30d5\u30a1\u30a4\u30eb \u3053\u3053\u3067\u8a00\u3046SQL\u30d5\u30a1\u30a4\u30eb\u3068\u306f2-way-sql\u3067\u66f8\u304b\u308c\u305f\u30d7\u30ec\u30fc\u30f3\u306a\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u3053\u3068\u3067\u3059 \u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0 SQL\u30d5\u30a1\u30a4\u30eb\u306e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u306fUTF-8\u3067\u306a\u3051\u308c\u3070\u3044\u3051\u307e\u305b\u3093 SQL\u30b3\u30e1\u30f3\u30c8 SQL \u30b3\u30e1\u30f3\u30c8\u4e2d\u306b\u5f0f\u3092\u8a18\u8ff0\u3059\u308b\u3053\u3068\u3067\u5024\u306e\u30d0\u30a4\u30f3\u30c7\u30a3\u30f3\u30b0\u3084\u6761\u4ef6\u5206\u5c90\u3092\u884c\u3044\u307e\u3059\u3002 EasySqlParser\u306b\u3088\u3063\u3066\u89e3\u91c8\u3055\u308c\u308bSQL\u30b3\u30e1\u30f3\u30c8\u3092 \u5f0f\u30b3\u30e1\u30f3\u30c8 \u3068\u547c\u3073\u307e\u3059\u3002 \u5f0f\u30b3\u30e1\u30f3\u30c8\u306f\u4ee5\u4e0b\u306e\u3082\u306e\u304c\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u307e\u3059 \u30d0\u30a4\u30f3\u30c9\u5909\u6570\u30b3\u30e1\u30f3\u30c8 \u57cb\u3081\u8fbc\u307f\u5909\u6570\u30b3\u30e1\u30f3\u30c8 \u6761\u4ef6\u30b3\u30e1\u30f3\u30c8 Warning DOMA\u306e \u7e70\u308a\u8fd4\u3057\u30b3\u30e1\u30f3\u30c8(for) \u3001 \u30ab\u30e9\u30e0\u30ea\u30b9\u30c8\u5c55\u958b\u30b3\u30e1\u30f3\u30c8(expand, populate) \u306fEasySqlParser\u3067\u306f\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u307e\u305b\u3093 \u30d0\u30a4\u30f3\u30c9\u5909\u6570\u30b3\u30e1\u30f3\u30c8 \u30d0\u30a4\u30f3\u30c9\u5909\u6570\u3092\u793a\u3059\u5f0f\u30b3\u30e1\u30f3\u30c8\u3092 \u30d0\u30a4\u30f3\u30c9\u5909\u6570 \u30b3\u30e1\u30f3\u30c8\u3068\u547c\u3073\u307e\u3059\u3002 \u30d0\u30a4\u30f3\u30c9\u5909\u6570\u306f\u3001 System.Data.IDbDataParameter \u3068\u3057\u3066\u751f\u6210\u3055\u308c\u307e\u3059\u3002 \u30d0\u30a4\u30f3\u30c9\u5909\u6570\u306f /*\uff5e*/ \u3068\u3044\u3046\u30d6\u30ed\u30c3\u30af\u30b3\u30e1\u30f3\u30c8\u3067\u56f2\u3093\u3067\u793a\u3057\u307e\u3059\u3002 \u30d0\u30a4\u30f3\u30c9\u5909\u6570\u306e\u540d\u524d\u306f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u540d\u306b\u5bfe\u5fdc\u3057\u307e\u3059\u3002\u5bfe\u5fdc\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u578b\u306f string \u3001 int \u306a\u3069\u306e\u57fa\u672c\u578b \u3082\u3057\u304f\u306f \u305d\u306e System.Collections.Generic.IEnumerable<T> \u3067\u306a\u3051\u308c\u3070\u3044\u3051\u307e\u305b\u3093\u3002\u30d0\u30a4\u30f3\u30c9\u5909\u6570\u30b3\u30e1\u30f3\u30c8\u306e\u76f4\u5f8c\u306b\u306f\u30c6\u30b9\u30c8\u7528\u30c7\u30fc\u30bf\u3092\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u305f\u3060\u3057\u3001\u30c6\u30b9\u30c8\u7528\u30c7\u30fc\u30bf\u306f\u5b9f\u884c\u6642\u306b\u306f\u4f7f\u7528\u3055\u308c\u307e\u305b\u3093\u3002 Warning \u30d0\u30a4\u30f3\u30c9\u5909\u6570\u306fDOMA\u3067\u306f\u30d5\u30a3\u30fc\u30eb\u30c9\u3067\u3057\u305f\u304c\u3001EasySqlParser\u3067\u306f\u30d1\u30d6\u30ea\u30c3\u30af\u306a\u30d7\u30ed\u30d1\u30c6\u30a3\u3067\u3059 Note \u30c6\u30b9\u30c8\u7528\u30c7\u30fc\u30bf\u304c\u306a\u3051\u308c\u3070SSMS\u7b49\u306e\u30c4\u30fc\u30eb\u3067\u5b9f\u884c\u3057\u305f\u969b\u306b\u30a8\u30e9\u30fc\u3068\u306a\u308b\u305f\u3081\u30c6\u30b9\u30c8\u7528\u30c7\u30fc\u30bf\u304c\u5fc5\u8981\u3068\u306a\u308a\u307e\u3059 \u57fa\u672c\u578b\u306e\u30d1\u30e9\u30e1\u30fc\u30bf \u4ee5\u4e0b\u304cSqlParser\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u5bfe\u5fdc\u3059\u308bSQL\u306e\u4f8b\u3067\u3059 var parser = new SqlParser( \"path/to/sql\" , new {BusinessEntityID = 99999 } ); var result = parser.Parse(); Console.WriteLine(result.DebugSql); /* SELECT * FROM HumanResources.Employee WHERE BusinessEntityID = 99999 */ SELECT * FROM HumanResources.Employee WHERE BusinessEntityID = /* BusinessEntityID */ 1 Warning DOMA\u3068\u7570\u306a\u308a\u3001EasySqlParser\u3067\u306f 1\u3064\u306e\u30d0\u30a4\u30f3\u30c9\u5909\u6570 \u3067\u3082\u30d7\u30ed\u30d1\u30c6\u30a3\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093 IEnumerable<T>\u578b\u306e\u30d1\u30e9\u30e1\u30fc\u30bf IN\u53e5\u306b\u6e21\u3059\u30d0\u30a4\u30f3\u30c9\u5909\u6570\u306f IEnumerable<T> \u578b\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059 var parser = new SqlParser( \"path/to/sql\" , new {BusinessEntityIDs = new List< int >{ 10 , 11 , 12 }} ); var result = parser.Parse(); Console.WriteLine(result.DebugSql); /* SELECT * FROM HumanResources.Employee WHERE BusinessEntityID IN (10, 11, 12) */ SELECT * FROM HumanResources.Employee WHERE BusinessEntityID IN /* BusinessEntityIDs */ ( 1 ) \u57cb\u3081\u8fbc\u307f\u5909\u6570\u30b3\u30e1\u30f3\u30c8 \u57cb\u3081\u8fbc\u307f\u5909\u6570\u3092\u793a\u3059\u5f0f\u30b3\u30e1\u30f3\u30c8\u3092\u57cb\u3081\u8fbc\u307f\u5909\u6570\u30b3\u30e1\u30f3\u30c8\u3068\u547c\u3073\u307e\u3059\u3002 \u57cb\u3081\u8fbc\u307f\u5909\u6570\u306e\u5024\u306f SQL \u3092\u7d44\u307f\u7acb\u3066\u308b\u969b\u306b SQL \u306e\u4e00\u90e8\u3068\u3057\u3066\u76f4\u63a5\u57cb\u3081\u8fbc\u307e\u308c\u307e\u3059\u3002 SQL \u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u3092\u9632\u3050\u305f\u3081\u3001\u57cb\u3081\u8fbc\u307f\u5909\u6570\u306e\u5024\u306b\u4ee5\u4e0b\u306e\u5024\u3092\u542b\u3081\u308b\u3053\u3068\u306f\u7981\u6b62\u3057\u3066\u3044\u307e\u3059\u3002 \u30b7\u30f3\u30b0\u30eb\u30af\u30a9\u30c6\u30fc\u30b7\u30e7\u30f3 \u30bb\u30df\u30b3\u30ed\u30f3 \u884c\u30b3\u30e1\u30f3\u30c8 \u30d6\u30ed\u30c3\u30af\u30b3\u30e1\u30f3\u30c8 \u57cb\u3081\u8fbc\u307f\u5909\u6570\u306f /*#\uff5e*/ \u3068\u3044\u3046\u30d6\u30ed\u30c3\u30af\u30b3\u30e1\u30f3\u30c8\u3067\u793a\u3057\u307e\u3059\u3002 \u57cb\u3081\u8fbc\u307f\u5909\u6570\u306e\u540d\u524d\u306f \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u540d\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3055\u308c\u307e\u3059\u3002 \u57cb\u3081\u8fbc\u307f\u5909\u6570\u306f ORDER BY \u53e5\u306a\u3069 SQL \u306e\u4e00\u90e8\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u7d44\u307f\u7acb\u3066\u305f\u3044\u5834\u5408\u306b\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002 \u4ee5\u4e0b\u304cSqlParser\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u5bfe\u5fdc\u3059\u308bSQL\u306e\u4f8b\u3067\u3059 var parser = new SqlParser( \"path/to/sql\" , new { BusinessEntityID = 1000 , Orderby = \"ORDER BY BirthDate ASC\" } ); var result = parser.Parse(); Console.WriteLine(result.DebugSql); /* SELECT * FROM HumanResources.Employee WHERE BusinessEntityID > 1000 */ SELECT * FROM HumanResources.Employee WHERE BusinessEntityID > /* BusinessEntityID */ 1 /*# Orderby */ \u6761\u4ef6\u30b3\u30e1\u30f3\u30c8 if\u3068end \u6761\u4ef6\u5206\u5c90\u3092\u793a\u3059\u5f0f\u30b3\u30e1\u30f3\u30c8\u3092\u6761\u4ef6\u30b3\u30e1\u30f3\u30c8\u3068\u547c\u3073\u307e\u3059\u3002\u69cb\u6587\u306f\u6b21\u306e\u3068\u304a\u308a\u3067\u3059\u3002 SELECT * FROM HumanResources.Employee WHERE /*%if BusinessEntityID != null */ BusinessEntityID = /* BusinessEntityID */ 1 /*%end*/ \u3053\u308c\u306f BusinessEntityID \u304c null \u3067\u306a\u3044\u5834\u5408\u3001\u4ee5\u4e0b\u306eSQL\u6587\u306b\u5909\u63db\u3055\u308c\u307e\u3059 SELECT * FROM HumanResources.Employee WHERE BusinessEntityID = @ BusinessEntityID @ \u306e\u3088\u3046\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u30de\u30fc\u30ab\u30fc\u306fDB\u63a5\u7d9a\u306e\u7a2e\u985e\u3067\u81ea\u52d5\u7684\u306b\u6c7a\u5b9a\u3055\u308c\u307e\u3059 BusinessEntityID \u304c null \u306e\u5834\u5408\u306f\u4e0b\u8a18\u306eSQL\u6587\u306b\u306a\u308a\u307e\u3059 SELECT * FROM HumanResources.Employee DOMA\u540c\u69d8\u3001\u6761\u4ef6\u30b3\u30e1\u30f3\u30c8\u306b\u304a\u3051\u308bWHERE\u3084HAVING\u306e\u81ea\u52d5\u9664\u53bb\u6a5f\u80fd\u306b\u3088\u308a\u3001WHERE\u53e5\u306f\u524a\u9664\u3055\u308c\u307e\u3059 \u6761\u4ef6\u30b3\u30e1\u30f3\u30c8\u306b\u304a\u3051\u308bWHERE\u3084HAVING\u306e\u81ea\u52d5\u9664\u53bb \u6761\u4ef6\u30b3\u30e1\u30f3\u30c8\u304c\u3059\u3079\u3066\u507d\u3068\u306a\u308a\u3001WHERE\u53e5\u3084HAVING\u53e5\u304c\u6210\u308a\u7acb\u305f\u306a\u3044\u5834\u5408 /*%if \uff5e*/ \u306e\u524d\u306e WHERE \u306f\u81ea\u52d5\u3067\u9664\u53bb\u3055\u308c\u307e\u3059 \u6761\u4ef6\u30b3\u30e1\u30f3\u30c8\u306b\u304a\u3051\u308bAND\u3084OR\u306e\u81ea\u52d5\u9664\u53bb \u6761\u4ef6\u30b3\u30e1\u30f3\u30c8\u3092\u4f7f\u7528\u3057\u305f\u5834\u5408\u3001\u6761\u4ef6\u306e\u5f8c\u308d\u306b\u3064\u3065\u304f AND \u3084 OR \u306b\u3064\u3044\u3066\u81ea\u52d5\u3067\u51fa\u529b\u306e\u8981/\u4e0d\u8981\u3092\u5224\u5b9a\u3057\u307e\u3059\u3002 \u305f\u3068\u3048\u3070\u3001\u6b21\u306e\u3088\u3046\u306aSQL\u3067 BirthDate \u304c null \u306e\u5834\u5408\u3001 SELECT t0.BusinessEntityID , t1.FirstName , t1.MiddleName , t1.LastName , t0.BirthDate , t0.MaritalStatus , t0.Gender , t0.HireDate FROM HumanResources.Employee t0 INNER JOIN Person.Person t1 ON t0.BusinessEntityID = t1.BusinessEntityID WHERE /*%if BirthDate != null */ t0.BirthDate > /* BirthDate */ '1980-01-01' /*%end*/ AND t1.FirstName LIKE 'A%' ORDER BY t0.BusinessEntityID /*%end*/ \u306e\u5f8c\u308d\u306e AND \u306f\u81ea\u52d5\u3067\u9664\u53bb\u3055\u308c\u3001\u4e0b\u8a18\u306eSQL\u304c\u751f\u6210\u3055\u308c\u307e\u3059 SELECT t0.BusinessEntityID , t1.FirstName , t1.MiddleName , t1.LastName , t0.BirthDate , t0.MaritalStatus , t0.Gender , t0.HireDate FROM HumanResources.Employee t0 INNER JOIN Person.Person t1 ON t0.BusinessEntityID = t1.BusinessEntityID WHERE t1.FirstName LIKE 'A%' ORDER BY t0.BusinessEntityID elseif\u3068else /*%if \u6761\u4ef6\u5f0f*/ \u3068 /*%end*/ \u306e\u9593\u3067\u306f\u3001 elseif \u3084 else \u3092\u8868\u3059\u6b21\u306e\u69cb\u6587\u3082\u4f7f\u7528\u3067\u304d\u307e\u3059 SELECT t0. * FROM HumanResources.Employee t0 INNER JOIN HumanResources.EmployeeDepartmentHistory t1 ON t0.BusinessEntityID = t1.BusinessEntityID INNER JOIN HumanResources.Department t2 ON t1.DepartmentID = t2.DepartmentID WHERE /*%if BusinessEntityID != null */ t0.BusinessEntityID = /* BusinessEntityID */ 9999 /*%elseif DepartmentID != null */ AND t2.DepartmentID = /* DepartmentID */ 99 /*%else*/ AND t1.EndDate IS NULL /*%end*/ BusinessEntityID != null \u304c\u6210\u7acb\u3059\u308b\u5834\u5408 SELECT t0. * FROM HumanResources.Employee t0 INNER JOIN HumanResources.EmployeeDepartmentHistory t1 ON t0.BusinessEntityID = t1.BusinessEntityID INNER JOIN HumanResources.Department t2 ON t1.DepartmentID = t2.DepartmentID WHERE t0.BusinessEntityID = @ BusinessEntityID BusinessEntityID == null && DepartmentID != null \u304c\u6210\u7acb\u3059\u308b\u5834\u5408 SELECT t0. * FROM HumanResources.Employee t0 INNER JOIN HumanResources.EmployeeDepartmentHistory t1 ON t0.BusinessEntityID = t1.BusinessEntityID INNER JOIN HumanResources.Department t2 ON t1.DepartmentID = t2.DepartmentID WHERE t2.DepartmentID = @ DepartmentID BusinessEntityID == null && DepartmentID == null \u304c\u6210\u7acb\u3059\u308b\u5834\u5408 SELECT t0. * FROM HumanResources.Employee t0 INNER JOIN HumanResources.EmployeeDepartmentHistory t1 ON t0.BusinessEntityID = t1.BusinessEntityID INNER JOIN HumanResources.Department t2 ON t1.DepartmentID = t2.DepartmentID WHERE t1.EndDate IS NULL \u30cd\u30b9\u30c8\u3057\u305f\u6761\u4ef6\u30b3\u30e1\u30f3\u30c8 .NET\u306e\u69cb\u6587\u3068\u540c\u69d8\u306b\u3001\u6761\u4ef6\u30b3\u30e1\u30f3\u30c8\u306f\u30cd\u30b9\u30c8\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059 SELECT t0. * FROM HumanResources.Employee t0 INNER JOIN Person.Person t1 ON t0.BusinessEntityID = t1.BusinessEntityID WHERE /*%if BusinessEntityID != null */ t0.BusinessEntityID = /* BusinessEntityID */ 1 /*%if MiddleName != null */ AND t1.MiddleName = /* MiddleName */ 'hoge' /*%else*/ AND t1.MiddleName IS NULL /*%end*/ /*%end*/ \u6761\u4ef6\u30b3\u30e1\u30f3\u30c8\u306b\u304a\u3051\u308b\u5236\u7d04 \u7bc0(SELECT,FROM,WHERE,GROUP BY, HAVING,ORDER BY\u306a\u3069)\u3092\u307e\u305f\u304c\u3063\u3066 if~end \u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093 \u4f8b) SELECT * FROM HumanResources.Employee /*%if BusinessEntityID != null */ WHERE BusinessEntityID = /* BusinessEntityID */ 99 /*%end*/ \u4e0b\u8a18\u306e\u3088\u3046\u306b if \u3068 end \u304c\u7570\u306a\u308b\u30ec\u30d9\u30eb\u306b\u3042\u308b\u5834\u5408\u3082\u30a8\u30e9\u30fc\u3068\u306a\u308a\u307e\u3059 SELECT * FROM HumanResources.Employee WHERE BusinessEntityID in /*%if BirthDate != null */ (... /*%end*/ ...) \u7e70\u308a\u8fd4\u3057\u30b3\u30e1\u30f3\u30c8 EasySqlParser\u3067\u306f\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u307e\u305b\u3093 \u9078\u629e\u30ab\u30e9\u30e0\u30ea\u30b9\u30c8\u5c55\u958b\u30b3\u30e1\u30f3\u30c8 EasySqlParser\u3067\u306f\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u307e\u305b\u3093 \u66f4\u65b0\u30ab\u30e9\u30e0\u30ea\u30b9\u30c8\u751f\u6210\u30b3\u30e1\u30f3\u30c8 EasySqlParser\u3067\u306f\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u307e\u305b\u3093 \u901a\u5e38\u306e\u30d6\u30ed\u30c3\u30af\u30b3\u30e1\u30f3\u30c8 /* \u306e\u76f4\u5f8c\u306b\u7d9a\u304f3\u6587\u5b57\u76ee\u304cC#\u306e\u8b58\u5225\u5b50\u306e\u5148\u982d\u3067\u4f7f\u7528\u3067\u304d\u306a\u3044\u6587\u5b57 \uff08\u305f\u3060\u3057\u3001\u7a7a\u767d\u304a\u3088\u3073\u5f0f\u3067\u7279\u5225\u306a\u610f\u5473\u3092\u3082\u3064 % \u3001 # \u3001 @ \u3001 \" \u3001 ' \u306f\u9664\u304f\uff09\u306e\u5834\u5408\u3001 \u305d\u308c\u306f\u901a\u5e38\u306e\u30d6\u30ed\u30c3\u30af\u30b3\u30e1\u30f3\u30c8\u3060\u3068\u307f\u306a\u3055\u308c\u307e\u3059 \u901a\u5e38\u306e\u30d6\u30ed\u30c3\u30af\u30b3\u30e1\u30f3\u30c8\u4f8b /**\uff5e*/ /*+\uff5e*/ /*=\uff5e*/ /*:\uff5e*/ /*;\uff5e*/ /*(\uff5e*/ /*)\uff5e*/ /*&\uff5e*/ \u5f0f\u30b3\u30e1\u30f3\u30c8\u4f8b /* \uff5e*/ ... --3\u6587\u5b57\u76ee\u304c\u7a7a\u767d\u3067\u3042\u308b\u305f\u3081\u5f0f\u30b3\u30e1\u30f3\u30c8\u3067\u3059\u3002 /*a\uff5e*/ ... --3\u6587\u5b57\u76ee\u304cC#\u306e\u8b58\u5225\u5b50\u306e\u5148\u982d\u3067\u4f7f\u7528\u53ef\u80fd\u306a\u6587\u5b57\u3067\u3042\u308b\u305f\u3081\u5f0f\u30b3\u30e1\u30f3\u30c8\u3067\u3059\u3002 /*$\uff5e*/ ... --3\u6587\u5b57\u76ee\u304cC#\u306e\u8b58\u5225\u5b50\u306e\u5148\u982d\u3067\u4f7f\u7528\u53ef\u80fd\u306a\u6587\u5b57\u3067\u3042\u308b\u305f\u3081\u5f0f\u30b3\u30e1\u30f3\u30c8\u3067\u3059\u3002 /*%\uff5e*/ ... --3\u6587\u5b57\u76ee\u304c\u6761\u4ef6\u30b3\u30e1\u30f3\u30c8\u306e\u59cb\u307e\u308a\u3092\u8868\u3059\u300c%\u300d\u3067\u3042\u308b\u305f\u3081\u5f0f\u30b3\u30e1\u30f3\u30c8\u3067\u3059\u3002 /*#\uff5e*/ ... --3\u6587\u5b57\u76ee\u304c\u57cb\u3081\u8fbc\u307f\u5909\u6570\u30b3\u30e1\u30f3\u30c8\u3092\u8868\u3059\u300c#\u300d\u3067\u3042\u308b\u305f\u3081\u5f0f\u30b3\u30e1\u30f3\u30c8\u3067\u3059\u3002 /*@\uff5e*/ ... --3\u6587\u5b57\u76ee\u304c\u7d44\u307f\u8fbc\u307f\u95a2\u6570\u3082\u3057\u304f\u3092\u8868\u3059\u300c@\u300d\u3067\u3042\u308b\u305f\u3081\u5f0f\u30b3\u30e1\u30f3\u30c8\u3067\u3059\u3002 /*\"\uff5e*/ ... --3\u6587\u5b57\u76ee\u304c\u6587\u5b57\u5217\u30ea\u30c6\u30e9\u30eb\u306e\u5f15\u7528\u7b26\u3092\u8868\u3059\u300c\"\u300d\u3067\u3042\u308b\u305f\u3081\u5f0f\u30b3\u30e1\u30f3\u30c8\u3067\u3059\u3002 /*'\uff5e*/ ... --3\u6587\u5b57\u76ee\u304c\u6587\u5b57\u30ea\u30c6\u30e9\u30eb\u306e\u5f15\u7528\u7b26\u3092\u8868\u3059\u300c'\u300d\u3067\u3042\u308b\u305f\u3081\u5f0f\u30b3\u30e1\u30f3\u30c8\u3067\u3059\u3002 Note \u7279\u306b\u7406\u7531\u304c\u7121\u3051\u308c\u3070\u901a\u5e38\u306e\u30d6\u30ed\u30c3\u30af\u30b3\u30e1\u30f3\u30c8\u306f /**\uff5e*/ \u3092\u5229\u7528\u3057\u3066\u304f\u3060\u3055\u3044 \u901a\u5e38\u306e\u884c\u30b3\u30e1\u30f3\u30c8 -- \u306f\u884c\u30b3\u30e1\u30f3\u30c8\u3067\u3059 EasySqlParser\u306f\u884c\u30b3\u30e1\u30f3\u30c8\u3092\u89e3\u91c8\u3057\u307e\u305b\u3093","title":"SQL"},{"location":"ja/sql/#sql","text":"Note DOMA\u7d4c\u9a13\u8005\u306fWarning\u30c8\u30d4\u30c3\u30af\u306b\u6ce8\u76ee\u3057\u306a\u304c\u3089\u6d41\u3057\u8aad\u307f\u3057\u3066\u304f\u3060\u3055\u3044 DOMA\u306f\u672a\u7d4c\u9a13\u3060\u304c\u3001S2Dao\u30fbS2Jdbc\u306a\u3069DOMA\u4ee5\u5916\u306e2-way-sql\u30e9\u30a4\u30d6\u30e9\u30ea\u7d4c\u9a13\u8005\u306f\u5168\u4f53\u3092\u6d41\u3057\u8aad\u307f\u3057\u3066\u304f\u3060\u3055\u3044","title":"SQL"},{"location":"ja/sql/#_1","text":"2-way-sql\u306f\u901a\u5e38\u306eSQL\u6587\u306b\u4e00\u5473\u52a0\u3048\u308b\u3053\u3068\u3067\u4ee5\u4e0b\u306e\u3053\u3068\u304c\u53ef\u80fd\u3068\u306a\u308a\u307e\u3059 \u30b3\u30e1\u30f3\u30c8\u3068\u30d0\u30a4\u30f3\u30c9\u5909\u6570\u3067\u52d5\u7684\u306aSQL\u306e\u7d44\u307f\u7acb\u3066\u308b \u30d0\u30a4\u30f3\u30c9\u5909\u6570\u306b\u5bfe\u3059\u308b\u30c6\u30b9\u30c8\u7528\u30c7\u30fc\u30bf\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067SQL Server Management Studio\u3001SQL Developer\u3001A5:SQL Mk-2\u3001DBeaver\u306a\u3069\u3068\u3044\u3063\u305f\u30c4\u30fc\u30eb\u304b\u3089SQL\u3092\u5b9f\u884c\u3059\u308b","title":"\u6982\u8981"},{"location":"ja/sql/#sql_1","text":"\u3053\u3053\u3067\u8a00\u3046SQL\u30d5\u30a1\u30a4\u30eb\u3068\u306f2-way-sql\u3067\u66f8\u304b\u308c\u305f\u30d7\u30ec\u30fc\u30f3\u306a\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u3053\u3068\u3067\u3059","title":"SQL\u30d5\u30a1\u30a4\u30eb"},{"location":"ja/sql/#_2","text":"SQL\u30d5\u30a1\u30a4\u30eb\u306e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u306fUTF-8\u3067\u306a\u3051\u308c\u3070\u3044\u3051\u307e\u305b\u3093","title":"\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0"},{"location":"ja/sql/#sql_2","text":"SQL \u30b3\u30e1\u30f3\u30c8\u4e2d\u306b\u5f0f\u3092\u8a18\u8ff0\u3059\u308b\u3053\u3068\u3067\u5024\u306e\u30d0\u30a4\u30f3\u30c7\u30a3\u30f3\u30b0\u3084\u6761\u4ef6\u5206\u5c90\u3092\u884c\u3044\u307e\u3059\u3002 EasySqlParser\u306b\u3088\u3063\u3066\u89e3\u91c8\u3055\u308c\u308bSQL\u30b3\u30e1\u30f3\u30c8\u3092 \u5f0f\u30b3\u30e1\u30f3\u30c8 \u3068\u547c\u3073\u307e\u3059\u3002 \u5f0f\u30b3\u30e1\u30f3\u30c8\u306f\u4ee5\u4e0b\u306e\u3082\u306e\u304c\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u307e\u3059 \u30d0\u30a4\u30f3\u30c9\u5909\u6570\u30b3\u30e1\u30f3\u30c8 \u57cb\u3081\u8fbc\u307f\u5909\u6570\u30b3\u30e1\u30f3\u30c8 \u6761\u4ef6\u30b3\u30e1\u30f3\u30c8 Warning DOMA\u306e \u7e70\u308a\u8fd4\u3057\u30b3\u30e1\u30f3\u30c8(for) \u3001 \u30ab\u30e9\u30e0\u30ea\u30b9\u30c8\u5c55\u958b\u30b3\u30e1\u30f3\u30c8(expand, populate) \u306fEasySqlParser\u3067\u306f\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u307e\u305b\u3093","title":"SQL\u30b3\u30e1\u30f3\u30c8"},{"location":"ja/sql/#_3","text":"\u30d0\u30a4\u30f3\u30c9\u5909\u6570\u3092\u793a\u3059\u5f0f\u30b3\u30e1\u30f3\u30c8\u3092 \u30d0\u30a4\u30f3\u30c9\u5909\u6570 \u30b3\u30e1\u30f3\u30c8\u3068\u547c\u3073\u307e\u3059\u3002 \u30d0\u30a4\u30f3\u30c9\u5909\u6570\u306f\u3001 System.Data.IDbDataParameter \u3068\u3057\u3066\u751f\u6210\u3055\u308c\u307e\u3059\u3002 \u30d0\u30a4\u30f3\u30c9\u5909\u6570\u306f /*\uff5e*/ \u3068\u3044\u3046\u30d6\u30ed\u30c3\u30af\u30b3\u30e1\u30f3\u30c8\u3067\u56f2\u3093\u3067\u793a\u3057\u307e\u3059\u3002 \u30d0\u30a4\u30f3\u30c9\u5909\u6570\u306e\u540d\u524d\u306f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u540d\u306b\u5bfe\u5fdc\u3057\u307e\u3059\u3002\u5bfe\u5fdc\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u578b\u306f string \u3001 int \u306a\u3069\u306e\u57fa\u672c\u578b \u3082\u3057\u304f\u306f \u305d\u306e System.Collections.Generic.IEnumerable<T> \u3067\u306a\u3051\u308c\u3070\u3044\u3051\u307e\u305b\u3093\u3002\u30d0\u30a4\u30f3\u30c9\u5909\u6570\u30b3\u30e1\u30f3\u30c8\u306e\u76f4\u5f8c\u306b\u306f\u30c6\u30b9\u30c8\u7528\u30c7\u30fc\u30bf\u3092\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u305f\u3060\u3057\u3001\u30c6\u30b9\u30c8\u7528\u30c7\u30fc\u30bf\u306f\u5b9f\u884c\u6642\u306b\u306f\u4f7f\u7528\u3055\u308c\u307e\u305b\u3093\u3002 Warning \u30d0\u30a4\u30f3\u30c9\u5909\u6570\u306fDOMA\u3067\u306f\u30d5\u30a3\u30fc\u30eb\u30c9\u3067\u3057\u305f\u304c\u3001EasySqlParser\u3067\u306f\u30d1\u30d6\u30ea\u30c3\u30af\u306a\u30d7\u30ed\u30d1\u30c6\u30a3\u3067\u3059 Note \u30c6\u30b9\u30c8\u7528\u30c7\u30fc\u30bf\u304c\u306a\u3051\u308c\u3070SSMS\u7b49\u306e\u30c4\u30fc\u30eb\u3067\u5b9f\u884c\u3057\u305f\u969b\u306b\u30a8\u30e9\u30fc\u3068\u306a\u308b\u305f\u3081\u30c6\u30b9\u30c8\u7528\u30c7\u30fc\u30bf\u304c\u5fc5\u8981\u3068\u306a\u308a\u307e\u3059","title":"\u30d0\u30a4\u30f3\u30c9\u5909\u6570\u30b3\u30e1\u30f3\u30c8"},{"location":"ja/sql/#_4","text":"\u4ee5\u4e0b\u304cSqlParser\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u5bfe\u5fdc\u3059\u308bSQL\u306e\u4f8b\u3067\u3059 var parser = new SqlParser( \"path/to/sql\" , new {BusinessEntityID = 99999 } ); var result = parser.Parse(); Console.WriteLine(result.DebugSql); /* SELECT * FROM HumanResources.Employee WHERE BusinessEntityID = 99999 */ SELECT * FROM HumanResources.Employee WHERE BusinessEntityID = /* BusinessEntityID */ 1 Warning DOMA\u3068\u7570\u306a\u308a\u3001EasySqlParser\u3067\u306f 1\u3064\u306e\u30d0\u30a4\u30f3\u30c9\u5909\u6570 \u3067\u3082\u30d7\u30ed\u30d1\u30c6\u30a3\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093","title":"\u57fa\u672c\u578b\u306e\u30d1\u30e9\u30e1\u30fc\u30bf"},{"location":"ja/sql/#ienumerablet","text":"IN\u53e5\u306b\u6e21\u3059\u30d0\u30a4\u30f3\u30c9\u5909\u6570\u306f IEnumerable<T> \u578b\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059 var parser = new SqlParser( \"path/to/sql\" , new {BusinessEntityIDs = new List< int >{ 10 , 11 , 12 }} ); var result = parser.Parse(); Console.WriteLine(result.DebugSql); /* SELECT * FROM HumanResources.Employee WHERE BusinessEntityID IN (10, 11, 12) */ SELECT * FROM HumanResources.Employee WHERE BusinessEntityID IN /* BusinessEntityIDs */ ( 1 )","title":"IEnumerable&lt;T&gt;\u578b\u306e\u30d1\u30e9\u30e1\u30fc\u30bf"},{"location":"ja/sql/#_5","text":"\u57cb\u3081\u8fbc\u307f\u5909\u6570\u3092\u793a\u3059\u5f0f\u30b3\u30e1\u30f3\u30c8\u3092\u57cb\u3081\u8fbc\u307f\u5909\u6570\u30b3\u30e1\u30f3\u30c8\u3068\u547c\u3073\u307e\u3059\u3002 \u57cb\u3081\u8fbc\u307f\u5909\u6570\u306e\u5024\u306f SQL \u3092\u7d44\u307f\u7acb\u3066\u308b\u969b\u306b SQL \u306e\u4e00\u90e8\u3068\u3057\u3066\u76f4\u63a5\u57cb\u3081\u8fbc\u307e\u308c\u307e\u3059\u3002 SQL \u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u3092\u9632\u3050\u305f\u3081\u3001\u57cb\u3081\u8fbc\u307f\u5909\u6570\u306e\u5024\u306b\u4ee5\u4e0b\u306e\u5024\u3092\u542b\u3081\u308b\u3053\u3068\u306f\u7981\u6b62\u3057\u3066\u3044\u307e\u3059\u3002 \u30b7\u30f3\u30b0\u30eb\u30af\u30a9\u30c6\u30fc\u30b7\u30e7\u30f3 \u30bb\u30df\u30b3\u30ed\u30f3 \u884c\u30b3\u30e1\u30f3\u30c8 \u30d6\u30ed\u30c3\u30af\u30b3\u30e1\u30f3\u30c8 \u57cb\u3081\u8fbc\u307f\u5909\u6570\u306f /*#\uff5e*/ \u3068\u3044\u3046\u30d6\u30ed\u30c3\u30af\u30b3\u30e1\u30f3\u30c8\u3067\u793a\u3057\u307e\u3059\u3002 \u57cb\u3081\u8fbc\u307f\u5909\u6570\u306e\u540d\u524d\u306f \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u540d\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3055\u308c\u307e\u3059\u3002 \u57cb\u3081\u8fbc\u307f\u5909\u6570\u306f ORDER BY \u53e5\u306a\u3069 SQL \u306e\u4e00\u90e8\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u7d44\u307f\u7acb\u3066\u305f\u3044\u5834\u5408\u306b\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002 \u4ee5\u4e0b\u304cSqlParser\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u5bfe\u5fdc\u3059\u308bSQL\u306e\u4f8b\u3067\u3059 var parser = new SqlParser( \"path/to/sql\" , new { BusinessEntityID = 1000 , Orderby = \"ORDER BY BirthDate ASC\" } ); var result = parser.Parse(); Console.WriteLine(result.DebugSql); /* SELECT * FROM HumanResources.Employee WHERE BusinessEntityID > 1000 */ SELECT * FROM HumanResources.Employee WHERE BusinessEntityID > /* BusinessEntityID */ 1 /*# Orderby */","title":"\u57cb\u3081\u8fbc\u307f\u5909\u6570\u30b3\u30e1\u30f3\u30c8"},{"location":"ja/sql/#_6","text":"","title":"\u6761\u4ef6\u30b3\u30e1\u30f3\u30c8"},{"location":"ja/sql/#ifend","text":"\u6761\u4ef6\u5206\u5c90\u3092\u793a\u3059\u5f0f\u30b3\u30e1\u30f3\u30c8\u3092\u6761\u4ef6\u30b3\u30e1\u30f3\u30c8\u3068\u547c\u3073\u307e\u3059\u3002\u69cb\u6587\u306f\u6b21\u306e\u3068\u304a\u308a\u3067\u3059\u3002 SELECT * FROM HumanResources.Employee WHERE /*%if BusinessEntityID != null */ BusinessEntityID = /* BusinessEntityID */ 1 /*%end*/ \u3053\u308c\u306f BusinessEntityID \u304c null \u3067\u306a\u3044\u5834\u5408\u3001\u4ee5\u4e0b\u306eSQL\u6587\u306b\u5909\u63db\u3055\u308c\u307e\u3059 SELECT * FROM HumanResources.Employee WHERE BusinessEntityID = @ BusinessEntityID @ \u306e\u3088\u3046\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u30de\u30fc\u30ab\u30fc\u306fDB\u63a5\u7d9a\u306e\u7a2e\u985e\u3067\u81ea\u52d5\u7684\u306b\u6c7a\u5b9a\u3055\u308c\u307e\u3059 BusinessEntityID \u304c null \u306e\u5834\u5408\u306f\u4e0b\u8a18\u306eSQL\u6587\u306b\u306a\u308a\u307e\u3059 SELECT * FROM HumanResources.Employee DOMA\u540c\u69d8\u3001\u6761\u4ef6\u30b3\u30e1\u30f3\u30c8\u306b\u304a\u3051\u308bWHERE\u3084HAVING\u306e\u81ea\u52d5\u9664\u53bb\u6a5f\u80fd\u306b\u3088\u308a\u3001WHERE\u53e5\u306f\u524a\u9664\u3055\u308c\u307e\u3059 \u6761\u4ef6\u30b3\u30e1\u30f3\u30c8\u306b\u304a\u3051\u308bWHERE\u3084HAVING\u306e\u81ea\u52d5\u9664\u53bb \u6761\u4ef6\u30b3\u30e1\u30f3\u30c8\u304c\u3059\u3079\u3066\u507d\u3068\u306a\u308a\u3001WHERE\u53e5\u3084HAVING\u53e5\u304c\u6210\u308a\u7acb\u305f\u306a\u3044\u5834\u5408 /*%if \uff5e*/ \u306e\u524d\u306e WHERE \u306f\u81ea\u52d5\u3067\u9664\u53bb\u3055\u308c\u307e\u3059 \u6761\u4ef6\u30b3\u30e1\u30f3\u30c8\u306b\u304a\u3051\u308bAND\u3084OR\u306e\u81ea\u52d5\u9664\u53bb \u6761\u4ef6\u30b3\u30e1\u30f3\u30c8\u3092\u4f7f\u7528\u3057\u305f\u5834\u5408\u3001\u6761\u4ef6\u306e\u5f8c\u308d\u306b\u3064\u3065\u304f AND \u3084 OR \u306b\u3064\u3044\u3066\u81ea\u52d5\u3067\u51fa\u529b\u306e\u8981/\u4e0d\u8981\u3092\u5224\u5b9a\u3057\u307e\u3059\u3002 \u305f\u3068\u3048\u3070\u3001\u6b21\u306e\u3088\u3046\u306aSQL\u3067 BirthDate \u304c null \u306e\u5834\u5408\u3001 SELECT t0.BusinessEntityID , t1.FirstName , t1.MiddleName , t1.LastName , t0.BirthDate , t0.MaritalStatus , t0.Gender , t0.HireDate FROM HumanResources.Employee t0 INNER JOIN Person.Person t1 ON t0.BusinessEntityID = t1.BusinessEntityID WHERE /*%if BirthDate != null */ t0.BirthDate > /* BirthDate */ '1980-01-01' /*%end*/ AND t1.FirstName LIKE 'A%' ORDER BY t0.BusinessEntityID /*%end*/ \u306e\u5f8c\u308d\u306e AND \u306f\u81ea\u52d5\u3067\u9664\u53bb\u3055\u308c\u3001\u4e0b\u8a18\u306eSQL\u304c\u751f\u6210\u3055\u308c\u307e\u3059 SELECT t0.BusinessEntityID , t1.FirstName , t1.MiddleName , t1.LastName , t0.BirthDate , t0.MaritalStatus , t0.Gender , t0.HireDate FROM HumanResources.Employee t0 INNER JOIN Person.Person t1 ON t0.BusinessEntityID = t1.BusinessEntityID WHERE t1.FirstName LIKE 'A%' ORDER BY t0.BusinessEntityID","title":"if\u3068end"},{"location":"ja/sql/#elseifelse","text":"/*%if \u6761\u4ef6\u5f0f*/ \u3068 /*%end*/ \u306e\u9593\u3067\u306f\u3001 elseif \u3084 else \u3092\u8868\u3059\u6b21\u306e\u69cb\u6587\u3082\u4f7f\u7528\u3067\u304d\u307e\u3059 SELECT t0. * FROM HumanResources.Employee t0 INNER JOIN HumanResources.EmployeeDepartmentHistory t1 ON t0.BusinessEntityID = t1.BusinessEntityID INNER JOIN HumanResources.Department t2 ON t1.DepartmentID = t2.DepartmentID WHERE /*%if BusinessEntityID != null */ t0.BusinessEntityID = /* BusinessEntityID */ 9999 /*%elseif DepartmentID != null */ AND t2.DepartmentID = /* DepartmentID */ 99 /*%else*/ AND t1.EndDate IS NULL /*%end*/ BusinessEntityID != null \u304c\u6210\u7acb\u3059\u308b\u5834\u5408 SELECT t0. * FROM HumanResources.Employee t0 INNER JOIN HumanResources.EmployeeDepartmentHistory t1 ON t0.BusinessEntityID = t1.BusinessEntityID INNER JOIN HumanResources.Department t2 ON t1.DepartmentID = t2.DepartmentID WHERE t0.BusinessEntityID = @ BusinessEntityID BusinessEntityID == null && DepartmentID != null \u304c\u6210\u7acb\u3059\u308b\u5834\u5408 SELECT t0. * FROM HumanResources.Employee t0 INNER JOIN HumanResources.EmployeeDepartmentHistory t1 ON t0.BusinessEntityID = t1.BusinessEntityID INNER JOIN HumanResources.Department t2 ON t1.DepartmentID = t2.DepartmentID WHERE t2.DepartmentID = @ DepartmentID BusinessEntityID == null && DepartmentID == null \u304c\u6210\u7acb\u3059\u308b\u5834\u5408 SELECT t0. * FROM HumanResources.Employee t0 INNER JOIN HumanResources.EmployeeDepartmentHistory t1 ON t0.BusinessEntityID = t1.BusinessEntityID INNER JOIN HumanResources.Department t2 ON t1.DepartmentID = t2.DepartmentID WHERE t1.EndDate IS NULL","title":"elseif\u3068else"},{"location":"ja/sql/#_7","text":".NET\u306e\u69cb\u6587\u3068\u540c\u69d8\u306b\u3001\u6761\u4ef6\u30b3\u30e1\u30f3\u30c8\u306f\u30cd\u30b9\u30c8\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059 SELECT t0. * FROM HumanResources.Employee t0 INNER JOIN Person.Person t1 ON t0.BusinessEntityID = t1.BusinessEntityID WHERE /*%if BusinessEntityID != null */ t0.BusinessEntityID = /* BusinessEntityID */ 1 /*%if MiddleName != null */ AND t1.MiddleName = /* MiddleName */ 'hoge' /*%else*/ AND t1.MiddleName IS NULL /*%end*/ /*%end*/ \u6761\u4ef6\u30b3\u30e1\u30f3\u30c8\u306b\u304a\u3051\u308b\u5236\u7d04 \u7bc0(SELECT,FROM,WHERE,GROUP BY, HAVING,ORDER BY\u306a\u3069)\u3092\u307e\u305f\u304c\u3063\u3066 if~end \u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093 \u4f8b) SELECT * FROM HumanResources.Employee /*%if BusinessEntityID != null */ WHERE BusinessEntityID = /* BusinessEntityID */ 99 /*%end*/ \u4e0b\u8a18\u306e\u3088\u3046\u306b if \u3068 end \u304c\u7570\u306a\u308b\u30ec\u30d9\u30eb\u306b\u3042\u308b\u5834\u5408\u3082\u30a8\u30e9\u30fc\u3068\u306a\u308a\u307e\u3059 SELECT * FROM HumanResources.Employee WHERE BusinessEntityID in /*%if BirthDate != null */ (... /*%end*/ ...)","title":"\u30cd\u30b9\u30c8\u3057\u305f\u6761\u4ef6\u30b3\u30e1\u30f3\u30c8"},{"location":"ja/sql/#_8","text":"EasySqlParser\u3067\u306f\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u307e\u305b\u3093","title":"\u7e70\u308a\u8fd4\u3057\u30b3\u30e1\u30f3\u30c8"},{"location":"ja/sql/#_9","text":"EasySqlParser\u3067\u306f\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u307e\u305b\u3093","title":"\u9078\u629e\u30ab\u30e9\u30e0\u30ea\u30b9\u30c8\u5c55\u958b\u30b3\u30e1\u30f3\u30c8"},{"location":"ja/sql/#_10","text":"EasySqlParser\u3067\u306f\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u307e\u305b\u3093","title":"\u66f4\u65b0\u30ab\u30e9\u30e0\u30ea\u30b9\u30c8\u751f\u6210\u30b3\u30e1\u30f3\u30c8"},{"location":"ja/sql/#_11","text":"/* \u306e\u76f4\u5f8c\u306b\u7d9a\u304f3\u6587\u5b57\u76ee\u304cC#\u306e\u8b58\u5225\u5b50\u306e\u5148\u982d\u3067\u4f7f\u7528\u3067\u304d\u306a\u3044\u6587\u5b57 \uff08\u305f\u3060\u3057\u3001\u7a7a\u767d\u304a\u3088\u3073\u5f0f\u3067\u7279\u5225\u306a\u610f\u5473\u3092\u3082\u3064 % \u3001 # \u3001 @ \u3001 \" \u3001 ' \u306f\u9664\u304f\uff09\u306e\u5834\u5408\u3001 \u305d\u308c\u306f\u901a\u5e38\u306e\u30d6\u30ed\u30c3\u30af\u30b3\u30e1\u30f3\u30c8\u3060\u3068\u307f\u306a\u3055\u308c\u307e\u3059 \u901a\u5e38\u306e\u30d6\u30ed\u30c3\u30af\u30b3\u30e1\u30f3\u30c8\u4f8b /**\uff5e*/ /*+\uff5e*/ /*=\uff5e*/ /*:\uff5e*/ /*;\uff5e*/ /*(\uff5e*/ /*)\uff5e*/ /*&\uff5e*/ \u5f0f\u30b3\u30e1\u30f3\u30c8\u4f8b /* \uff5e*/ ... --3\u6587\u5b57\u76ee\u304c\u7a7a\u767d\u3067\u3042\u308b\u305f\u3081\u5f0f\u30b3\u30e1\u30f3\u30c8\u3067\u3059\u3002 /*a\uff5e*/ ... --3\u6587\u5b57\u76ee\u304cC#\u306e\u8b58\u5225\u5b50\u306e\u5148\u982d\u3067\u4f7f\u7528\u53ef\u80fd\u306a\u6587\u5b57\u3067\u3042\u308b\u305f\u3081\u5f0f\u30b3\u30e1\u30f3\u30c8\u3067\u3059\u3002 /*$\uff5e*/ ... --3\u6587\u5b57\u76ee\u304cC#\u306e\u8b58\u5225\u5b50\u306e\u5148\u982d\u3067\u4f7f\u7528\u53ef\u80fd\u306a\u6587\u5b57\u3067\u3042\u308b\u305f\u3081\u5f0f\u30b3\u30e1\u30f3\u30c8\u3067\u3059\u3002 /*%\uff5e*/ ... --3\u6587\u5b57\u76ee\u304c\u6761\u4ef6\u30b3\u30e1\u30f3\u30c8\u306e\u59cb\u307e\u308a\u3092\u8868\u3059\u300c%\u300d\u3067\u3042\u308b\u305f\u3081\u5f0f\u30b3\u30e1\u30f3\u30c8\u3067\u3059\u3002 /*#\uff5e*/ ... --3\u6587\u5b57\u76ee\u304c\u57cb\u3081\u8fbc\u307f\u5909\u6570\u30b3\u30e1\u30f3\u30c8\u3092\u8868\u3059\u300c#\u300d\u3067\u3042\u308b\u305f\u3081\u5f0f\u30b3\u30e1\u30f3\u30c8\u3067\u3059\u3002 /*@\uff5e*/ ... --3\u6587\u5b57\u76ee\u304c\u7d44\u307f\u8fbc\u307f\u95a2\u6570\u3082\u3057\u304f\u3092\u8868\u3059\u300c@\u300d\u3067\u3042\u308b\u305f\u3081\u5f0f\u30b3\u30e1\u30f3\u30c8\u3067\u3059\u3002 /*\"\uff5e*/ ... --3\u6587\u5b57\u76ee\u304c\u6587\u5b57\u5217\u30ea\u30c6\u30e9\u30eb\u306e\u5f15\u7528\u7b26\u3092\u8868\u3059\u300c\"\u300d\u3067\u3042\u308b\u305f\u3081\u5f0f\u30b3\u30e1\u30f3\u30c8\u3067\u3059\u3002 /*'\uff5e*/ ... --3\u6587\u5b57\u76ee\u304c\u6587\u5b57\u30ea\u30c6\u30e9\u30eb\u306e\u5f15\u7528\u7b26\u3092\u8868\u3059\u300c'\u300d\u3067\u3042\u308b\u305f\u3081\u5f0f\u30b3\u30e1\u30f3\u30c8\u3067\u3059\u3002 Note \u7279\u306b\u7406\u7531\u304c\u7121\u3051\u308c\u3070\u901a\u5e38\u306e\u30d6\u30ed\u30c3\u30af\u30b3\u30e1\u30f3\u30c8\u306f /**\uff5e*/ \u3092\u5229\u7528\u3057\u3066\u304f\u3060\u3055\u3044","title":"\u901a\u5e38\u306e\u30d6\u30ed\u30c3\u30af\u30b3\u30e1\u30f3\u30c8"},{"location":"ja/sql/#_12","text":"-- \u306f\u884c\u30b3\u30e1\u30f3\u30c8\u3067\u3059 EasySqlParser\u306f\u884c\u30b3\u30e1\u30f3\u30c8\u3092\u89e3\u91c8\u3057\u307e\u305b\u3093","title":"\u901a\u5e38\u306e\u884c\u30b3\u30e1\u30f3\u30c8"},{"location":"ja/usage/","text":"\u5b9f\u8df5\u7684\u306a\u4f7f\u3044\u65b9 \u6982\u8981 SQL\u6587\u3092\u30d1\u30fc\u30b9\u3059\u308b\u306b\u306f\u30d1\u30e9\u30e1\u30fc\u30bf\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u5b9a\u7fa9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059 \u30d1\u30e9\u30e1\u30fc\u30bf\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 \u30d1\u30e9\u30e1\u30fc\u30bf\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u533f\u540d\u578b\u3067\u3082\u69cb\u3044\u307e\u305b\u3093\u304c\u3001\u7279\u306b\u7406\u7531\u304c\u306a\u3051\u308c\u3070\u660e\u793a\u7684\u306a\u578b\u3068\u3057\u3066\u5b9f\u88c5\u3059\u308b\u3053\u3068\u3092\u304a\u52e7\u3081\u3057\u307e\u3059 \u3055\u3089\u306b\u8a00\u3048\u3070\u3001\u4e0a\u8a18\u30d1\u30e9\u30e1\u30fc\u30bf\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30af\u30e9\u30b9\u3068SQL\u30d5\u30a1\u30a4\u30eb\u3092\u8fd1\u304f\u306b\u7f6e\u304f\u3068\u3053\u3068\u3067\u7ba1\u7406\u3057\u3084\u3059\u304f\u306a\u308a\u307e\u3059 Warning \u30d1\u30e9\u30e1\u30fc\u30bf\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u30cd\u30b9\u30c8\u3055\u308c\u305f\u30d7\u30ed\u30d1\u30c6\u30a3\u3078\u306e\u30a2\u30af\u30bb\u30b9\u306f\u3067\u304d\u307e\u305b\u3093 public class SqlCondition { public ChildCondition ChildCondition { get ; set ; } public string Name { get ; set ;} } public class ChildCondition { public string Name { get ; set ;} } \u4e0a\u8a18\u306e\u5834\u5408\u3001ChildCondition.Name\u3078\u306f\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u305b\u3093 \u30d1\u30fc\u30b9\u7d50\u679c SqlParser#Parse \u306e\u7d50\u679c( SqlParserResult \u578b)\u306f\u4e0b\u8a18\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u6301\u3064\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u3057\u3066\u8fd4\u3055\u308c\u307e\u3059 ParsedSql DebugSql DbDataParameters ParsedSql ADO.NET \u3001 Dapper \u3001 Entity Framework Core \u306a\u3069\u306b\u6e21\u3059\u305f\u3081\u306e\u30d1\u30fc\u30b9\u3055\u308c\u305fSQL\u6587\u3067\u3059 \u30d1\u30e9\u30e1\u30fc\u30bf\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u5185\u5bb9\u306b\u3088\u3063\u3066\u52d5\u7684\u306b\u89e3\u91c8\u3055\u308cSQL\u6587\u304c\u7d44\u307f\u7acb\u3066\u3089\u308c\u307e\u3059 \u6709\u52b9\u306a\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u5024\u306f System.Data.IDbDataParameter \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u540d\u306b\u3088\u3063\u3066\u7f6e\u304d\u63db\u3048\u3089\u308c\u307e\u3059 DebugSql \u30ed\u30b0\u51fa\u529b\u306e\u305f\u3081\u306eSQL\u6587\u3067\u3059 \u30d1\u30e9\u30e1\u30fc\u30bf\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u5185\u5bb9\u306b\u3088\u3063\u3066\u52d5\u7684\u306b\u89e3\u91c8\u3055\u308cSQL\u6587\u304c\u7d44\u307f\u7acb\u3066\u3089\u308c\u307e\u3059 \u6709\u52b9\u306a\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u5024\u304c\u57cb\u3081\u8fbc\u307e\u308c\u305f\u72b6\u614b\u306eSQL\u6587\u3068\u306a\u308a\u307e\u3059 DbDataParameters SQL\u5b9f\u884c\u306e\u305f\u3081\u306e System.Data.IDbDataParameter \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3067\u3059 System.Data.IDbDataParameter System.Data.IDbDataParameter \u3092\u5229\u7528\u3057\u3066\u3044\u308b\u306e\u306f\u3001\u4ee5\u4e0b\u306e2\u3064\u306e\u7406\u7531\u306b\u3088\u308b\u3082\u306e\u3067\u3059 ADO.NET DataSet \u306a\u3069\u30ec\u30ac\u30b7\u30fc\u5411\u3051\u3078\u306e\u914d\u616e Dapper \u3001 Entity Framework Core \u306a\u3069\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u304b\u3089\u306e\u4e2d\u7acb\u6027\u3078\u306e\u8003\u616e \u3053\u306e\u95a2\u4fc2\u3067 Dapper \u3001 Entity Framework Core \u3067\u306f\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5909\u63db\u304c\u5fc5\u8981\u3068\u306a\u308a\u307e\u3059 \u8a73\u3057\u3044\u4f8b\u306f \u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0 \u3092\u3054\u89a7\u304f\u3060\u3055\u3044 \u5b9f\u884c\u4f8b(\u901a\u5e38) /** SelectEmployees.sql */ SELECT t0.BusinessEntityID , t1.FirstName , t1.MiddleName , t1.LastName , t0.BirthDate , t0.MaritalStatus , t0.Gender , t0.HireDate FROM HumanResources.Employee t0 INNER JOIN Person.Person t1 ON t0.BusinessEntityID = t1.BusinessEntityID WHERE /*%if MiddleNames != null && MiddleNames.Count > 0 */ t1.MiddleName IN /* MiddleNames */ ( 'M' ) /*%end*/ /*%if BirthDateFrom != null && BirthDateTo != null */ AND t0.BirthDate BETWEEN /* BirthDateFrom */ '1980-01-01' AND /* BirthDateTo */ '1990-01-01' /*%end*/ /*%if FirstName != null && FirstName != \"\" */ AND t1.FirstName LIKE /* @StartsWith(FirstName) */ 'A%' /*%end*/ ORDER BY t0.BusinessEntityID public class SqlCondition { public List< string > MiddleNames { get ; set ; } public DateTime? BirthDateFrom { get ; set ; } public DateTime? BirthDateTo { get ; set ; } public string FirstName { get ; set ; } } public class Program { static void Main ( string [] args) { ConfigContainer.AddDefault( DbConnectionKind.SqlServer, // DB\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u306e\u7a2e\u985e () => new SqlParameter() // SQL\u30d1\u30e9\u30e1\u30fc\u30bf\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u4f5c\u6210\u306e\u30c7\u30ea\u30b2\u30fc\u30c8 ); ConfigContainer.EnableCache = true ; var condition = new SqlCondition { BirthDateFrom = new DateTime( 1980 , 1 , 1 ), BirthDateTo = new DateTime( 1990 , 1 , 1 ) }; var parser = new SqlParser( \"path/to/SelectEmployees.sql\" , condition); var result = parser.Parse(); } } \u4e0a\u8a18\u306e\u5834\u5408\u30d1\u30fc\u30b9\u7d50\u679c\u306f\u305d\u308c\u305e\u308c\u4e0b\u8a18\u306e\u3068\u304a\u308a\u3067\u3059 SqlParser#Parse ParsedSql SELECT t0.BusinessEntityID , t1.FirstName , t1.MiddleName , t1.LastName , t0.BirthDate , t0.MaritalStatus , t0.Gender , t0.HireDate FROM HumanResources.Employee t0 INNER JOIN Person.Person t1 ON t0.BusinessEntityID = t1.BusinessEntityID WHERE t0.BirthDate BETWEEN @ BirthDateFrom AND @ BirthDateTo ORDER BY t0.BusinessEntityID SqlParser#Parse DebugSql SELECT t0.BusinessEntityID , t1.FirstName , t1.MiddleName , t1.LastName , t0.BirthDate , t0.MaritalStatus , t0.Gender , t0.HireDate FROM HumanResources.Employee t0 INNER JOIN Person.Person t1 ON t0.BusinessEntityID = t1.BusinessEntityID WHERE t0.BirthDate BETWEEN '1980/01/01 0:00:00' AND '1990/01/01 0:00:00' ORDER BY t0.BusinessEntityID SqlParser#Parse DbDataParameters index parameter name parameter value 0 @BirthDateFrom new DateTime(1980, 1, 1) 1 @BirthDateTo new DateTime(1990, 1, 1) \u30da\u30fc\u30b8\u30f3\u30b0 EasySqlParser\u304c\u5185\u90e8\u3067SQL\u30d5\u30a1\u30a4\u30eb\u3092\u66f8\u304d\u63db\u3048\u308b\u3053\u3068\u3067\u30c7\u30fc\u30bf\u53d6\u5f97\u7528\u306eSQL\u6587\u3001\u4ef6\u6570\u53d6\u5f97\u7528\u306eSQL\u6587\u3092\u751f\u6210\u3067\u304d\u307e\u3059 SqlParser#ParsePaginated \u306e\u7d50\u679c\u306f\u4e0b\u8a18\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u6301\u3064\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u3057\u3066\u8fd4\u3055\u308c\u307e\u3059 Result CountResult Result \u30c7\u30fc\u30bf\u53d6\u5f97\u7528\u306e SqlParserResult \u3053\u308c\u306f SqlParserResult \u578b\u3067\u3042\u308a\u3001 SqlParser#Parse \u306e\u7d50\u679c\u3068\u540c\u69d8 ParsedSql \u3001 DebugSql \u3001 DbDataParameters \u3092\u6301\u3063\u3066\u3044\u307e\u3059 CountResult \u4ef6\u6570\u53d6\u5f97\u7528\u306e SqlParserResult \u30c7\u30fc\u30bf\u53d6\u5f97\u7528\u3068\u540c\u3058\u304f\u3001 ParsedSql \u3001 DebugSql \u3001 DbDataParameters \u3092\u6301\u3063\u3066\u3044\u307e\u3059 \u5b9f\u884c\u4f8b(\u30da\u30fc\u30b8\u30f3\u30b0) SQL\u30d5\u30a1\u30a4\u30eb\u3084\u30d1\u30e9\u30e1\u30fc\u30bf\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u540c\u3058\u306a\u306e\u3067\u7701\u7565 public class Program { static void Main ( string [] args) { ConfigContainer.AddDefault( DbConnectionKind.SqlServer, // DB\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u306e\u7a2e\u985e () => new SqlParameter() // SQL\u30d1\u30e9\u30e1\u30fc\u30bf\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u4f5c\u6210\u306e\u30c7\u30ea\u30b2\u30fc\u30c8 ); ConfigContainer.EnableCache = true ; var condition = new SqlCondition { BirthDateFrom = new DateTime( 1980 , 1 , 1 ), BirthDateTo = new DateTime( 1990 , 1 , 1 ) }; var parser = new SqlParser( \"path/to/SelectEmployees.sql\" , condition); var result = parser.ParsePaginated( 10 , 10 ); // 11\u4ef6\u76ee\u304b\u308920\u4ef6\u76ee\u3092\u53d6\u5f97 } } SqlParser#ParsePaginated Result.ParsedSql SELECT t0.BusinessEntityID , t1.FirstName , t1.MiddleName , t1.LastName , t0.BirthDate , t0.MaritalStatus , t0.Gender , t0.HireDate FROM HumanResources.Employee t0 INNER JOIN Person.Person t1 ON t0.BusinessEntityID = t1.BusinessEntityID WHERE t0.BirthDate BETWEEN @ BirthDateFrom AND @ BirthDateTo ORDER BY t0.BusinessEntityID offset 10 rows fetch next 10 rows only SqlParser#ParsePaginated Result.DebugSql SELECT t0.BusinessEntityID , t1.FirstName , t1.MiddleName , t1.LastName , t0.BirthDate , t0.MaritalStatus , t0.Gender , t0.HireDate FROM HumanResources.Employee t0 INNER JOIN Person.Person t1 ON t0.BusinessEntityID = t1.BusinessEntityID WHERE t0.BirthDate BETWEEN '1980/01/01 0:00:00' AND '1990/01/01 0:00:00' ORDER BY t0.BusinessEntityID offset 10 rows fetch next 10 rows only SqlParser#ParsePaginated CountResult.ParsedSql select count ( * ) from ( SELECT t0.BusinessEntityID , t1.FirstName , t1.MiddleName , t1.LastName , t0.BirthDate , t0.MaritalStatus , t0.Gender , t0.HireDate FROM HumanResources.Employee t0 INNER JOIN Person.Person t1 ON t0.BusinessEntityID = t1.BusinessEntityID WHERE t0.BirthDate BETWEEN @ BirthDateFrom AND @ BirthDateTo ) t_ SqlParser#ParsePaginated CountResult.DebugSql select count ( * ) from ( SELECT t0.BusinessEntityID , t1.FirstName , t1.MiddleName , t1.LastName , t0.BirthDate , t0.MaritalStatus , t0.Gender , t0.HireDate FROM HumanResources.Employee t0 INNER JOIN Person.Person t1 ON t0.BusinessEntityID = t1.BusinessEntityID WHERE t0.BirthDate BETWEEN '1980/01/01 0:00:00' AND '1990/01/01 0:00:00' ) t_ ROW_NUMBER \u306e\u4f7f\u7528 SqlParser#ParsePaginated \u306e rowNumberColumn \u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u4efb\u610f\u306e\u6587\u5b57\u5217\u3092\u4e0e\u3048\u308b\u3068\u3001DB\u63a5\u7d9a\u306e\u7a2e\u985e\u3092\u7121\u8996\u3057\u3066\u5f37\u5236\u7684\u306b ROW_NUMBER \u95a2\u6570\u3092\u4f7f\u3046\u3088\u3046\u306b\u306a\u308a\u307e\u3059 rowNumberColumn \u306f ROW_NUMBER \u95a2\u6570\u306e\u623b\u308a\u5024\u3092\u53d7\u3051\u53d6\u308b\u4eee\u60f3\u5217\u540d\u3067\u3059 View \u5c64\u3067\u884c\u756a\u53f7\u3092\u51fa\u529b\u3059\u308b\u5834\u5408\u306b\u5229\u7528\u3067\u304d\u307e\u3059 Warning DB\u304c ROW_NUMBER \u3092\u5229\u7528\u3067\u304d\u308b\u304b\u3069\u3046\u304b\u78ba\u8a8d\u3057\u305f\u3046\u3048\u3067\u5229\u7528\u3057\u3066\u304f\u3060\u3055\u3044 \u5229\u7528\u53ef\u80fd\u306aDB\u3068\u30d0\u30fc\u30b8\u30e7\u30f3\u306f\u4e0b\u8a18\u306e\u3068\u304a\u308a\u3067\u3059 DB Version SQLServer 2005 Oracle 9i MySQL 8 PostgreSQL 8.4 DB2 9.1 SQLite 3.25 \u5b9f\u884c\u4f8b(ROW_NUMBER) SQL\u30d5\u30a1\u30a4\u30eb\u3084\u30d1\u30e9\u30e1\u30fc\u30bf\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u540c\u3058\u306a\u306e\u3067\u7701\u7565 public class Program { static void Main ( string [] args) { ConfigContainer.AddDefault( DbConnectionKind.SqlServer, // DB\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u306e\u7a2e\u985e () => new SqlParameter() // SQL\u30d1\u30e9\u30e1\u30fc\u30bf\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u4f5c\u6210\u306e\u30c7\u30ea\u30b2\u30fc\u30c8 ); ConfigContainer.EnableCache = true ; var condition = new SqlCondition { BirthDateFrom = new DateTime( 1980 , 1 , 1 ), BirthDateTo = new DateTime( 1990 , 1 , 1 ) }; var parser = new SqlParser( \"path/to/SelectEmployees.sql\" , condition); var result = parser.ParsePaginated( 10 , 10 , \"LineNo\" ); // 11\u4ef6\u76ee\u304b\u308920\u4ef6\u76ee\u3092\u53d6\u5f97 } } ROW_NUMBER Result.ParsedSql select * from ( select temp_. * , row_number() over( ORDER BY temp_.BusinessEntityID ) as LineNo from ( SELECT t0.BusinessEntityID , t1.FirstName , t1.MiddleName , t1.LastName , t0.BirthDate , t0.MaritalStatus , t0.Gender , t0.HireDate FROM HumanResources.Employee t0 INNER JOIN Person.Person t1 ON t0.BusinessEntityID = t1.BusinessEntityID WHERE t0.BirthDate BETWEEN @ BirthDateFrom AND @ BirthDateTo ) as temp_ ) as temp2_ where LineNo > 10 and LineNo <= 20 ROW_NUMBER Result.DebugSql select * from ( select temp_. * , row_number() over( ORDER BY temp_.BusinessEntityID ) as LineNo from ( SELECT t0.BusinessEntityID , t1.FirstName , t1.MiddleName , t1.LastName , t0.BirthDate , t0.MaritalStatus , t0.Gender , t0.HireDate FROM HumanResources.Employee t0 INNER JOIN Person.Person t1 ON t0.BusinessEntityID = t1.BusinessEntityID WHERE t0.BirthDate BETWEEN '1980/01/01 0:00:00' AND '1990/01/01 0:00:00' ) as temp_ ) as temp2_ where LineNo > 10 and LineNo <= 20","title":"\u5b9f\u8df5\u7684\u306a\u4f7f\u3044\u65b9"},{"location":"ja/usage/#_1","text":"","title":"\u5b9f\u8df5\u7684\u306a\u4f7f\u3044\u65b9"},{"location":"ja/usage/#_2","text":"SQL\u6587\u3092\u30d1\u30fc\u30b9\u3059\u308b\u306b\u306f\u30d1\u30e9\u30e1\u30fc\u30bf\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u5b9a\u7fa9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059 \u30d1\u30e9\u30e1\u30fc\u30bf\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 \u30d1\u30e9\u30e1\u30fc\u30bf\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u533f\u540d\u578b\u3067\u3082\u69cb\u3044\u307e\u305b\u3093\u304c\u3001\u7279\u306b\u7406\u7531\u304c\u306a\u3051\u308c\u3070\u660e\u793a\u7684\u306a\u578b\u3068\u3057\u3066\u5b9f\u88c5\u3059\u308b\u3053\u3068\u3092\u304a\u52e7\u3081\u3057\u307e\u3059 \u3055\u3089\u306b\u8a00\u3048\u3070\u3001\u4e0a\u8a18\u30d1\u30e9\u30e1\u30fc\u30bf\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30af\u30e9\u30b9\u3068SQL\u30d5\u30a1\u30a4\u30eb\u3092\u8fd1\u304f\u306b\u7f6e\u304f\u3068\u3053\u3068\u3067\u7ba1\u7406\u3057\u3084\u3059\u304f\u306a\u308a\u307e\u3059 Warning \u30d1\u30e9\u30e1\u30fc\u30bf\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u30cd\u30b9\u30c8\u3055\u308c\u305f\u30d7\u30ed\u30d1\u30c6\u30a3\u3078\u306e\u30a2\u30af\u30bb\u30b9\u306f\u3067\u304d\u307e\u305b\u3093 public class SqlCondition { public ChildCondition ChildCondition { get ; set ; } public string Name { get ; set ;} } public class ChildCondition { public string Name { get ; set ;} } \u4e0a\u8a18\u306e\u5834\u5408\u3001ChildCondition.Name\u3078\u306f\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u305b\u3093","title":"\u6982\u8981"},{"location":"ja/usage/#_3","text":"SqlParser#Parse \u306e\u7d50\u679c( SqlParserResult \u578b)\u306f\u4e0b\u8a18\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u6301\u3064\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u3057\u3066\u8fd4\u3055\u308c\u307e\u3059 ParsedSql DebugSql DbDataParameters","title":"\u30d1\u30fc\u30b9\u7d50\u679c"},{"location":"ja/usage/#parsedsql","text":"ADO.NET \u3001 Dapper \u3001 Entity Framework Core \u306a\u3069\u306b\u6e21\u3059\u305f\u3081\u306e\u30d1\u30fc\u30b9\u3055\u308c\u305fSQL\u6587\u3067\u3059 \u30d1\u30e9\u30e1\u30fc\u30bf\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u5185\u5bb9\u306b\u3088\u3063\u3066\u52d5\u7684\u306b\u89e3\u91c8\u3055\u308cSQL\u6587\u304c\u7d44\u307f\u7acb\u3066\u3089\u308c\u307e\u3059 \u6709\u52b9\u306a\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u5024\u306f System.Data.IDbDataParameter \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u540d\u306b\u3088\u3063\u3066\u7f6e\u304d\u63db\u3048\u3089\u308c\u307e\u3059","title":"ParsedSql"},{"location":"ja/usage/#debugsql","text":"\u30ed\u30b0\u51fa\u529b\u306e\u305f\u3081\u306eSQL\u6587\u3067\u3059 \u30d1\u30e9\u30e1\u30fc\u30bf\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u5185\u5bb9\u306b\u3088\u3063\u3066\u52d5\u7684\u306b\u89e3\u91c8\u3055\u308cSQL\u6587\u304c\u7d44\u307f\u7acb\u3066\u3089\u308c\u307e\u3059 \u6709\u52b9\u306a\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u5024\u304c\u57cb\u3081\u8fbc\u307e\u308c\u305f\u72b6\u614b\u306eSQL\u6587\u3068\u306a\u308a\u307e\u3059","title":"DebugSql"},{"location":"ja/usage/#dbdataparameters","text":"SQL\u5b9f\u884c\u306e\u305f\u3081\u306e System.Data.IDbDataParameter \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3067\u3059 System.Data.IDbDataParameter System.Data.IDbDataParameter \u3092\u5229\u7528\u3057\u3066\u3044\u308b\u306e\u306f\u3001\u4ee5\u4e0b\u306e2\u3064\u306e\u7406\u7531\u306b\u3088\u308b\u3082\u306e\u3067\u3059 ADO.NET DataSet \u306a\u3069\u30ec\u30ac\u30b7\u30fc\u5411\u3051\u3078\u306e\u914d\u616e Dapper \u3001 Entity Framework Core \u306a\u3069\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u304b\u3089\u306e\u4e2d\u7acb\u6027\u3078\u306e\u8003\u616e \u3053\u306e\u95a2\u4fc2\u3067 Dapper \u3001 Entity Framework Core \u3067\u306f\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5909\u63db\u304c\u5fc5\u8981\u3068\u306a\u308a\u307e\u3059 \u8a73\u3057\u3044\u4f8b\u306f \u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0 \u3092\u3054\u89a7\u304f\u3060\u3055\u3044","title":"DbDataParameters"},{"location":"ja/usage/#_4","text":"/** SelectEmployees.sql */ SELECT t0.BusinessEntityID , t1.FirstName , t1.MiddleName , t1.LastName , t0.BirthDate , t0.MaritalStatus , t0.Gender , t0.HireDate FROM HumanResources.Employee t0 INNER JOIN Person.Person t1 ON t0.BusinessEntityID = t1.BusinessEntityID WHERE /*%if MiddleNames != null && MiddleNames.Count > 0 */ t1.MiddleName IN /* MiddleNames */ ( 'M' ) /*%end*/ /*%if BirthDateFrom != null && BirthDateTo != null */ AND t0.BirthDate BETWEEN /* BirthDateFrom */ '1980-01-01' AND /* BirthDateTo */ '1990-01-01' /*%end*/ /*%if FirstName != null && FirstName != \"\" */ AND t1.FirstName LIKE /* @StartsWith(FirstName) */ 'A%' /*%end*/ ORDER BY t0.BusinessEntityID public class SqlCondition { public List< string > MiddleNames { get ; set ; } public DateTime? BirthDateFrom { get ; set ; } public DateTime? BirthDateTo { get ; set ; } public string FirstName { get ; set ; } } public class Program { static void Main ( string [] args) { ConfigContainer.AddDefault( DbConnectionKind.SqlServer, // DB\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u306e\u7a2e\u985e () => new SqlParameter() // SQL\u30d1\u30e9\u30e1\u30fc\u30bf\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u4f5c\u6210\u306e\u30c7\u30ea\u30b2\u30fc\u30c8 ); ConfigContainer.EnableCache = true ; var condition = new SqlCondition { BirthDateFrom = new DateTime( 1980 , 1 , 1 ), BirthDateTo = new DateTime( 1990 , 1 , 1 ) }; var parser = new SqlParser( \"path/to/SelectEmployees.sql\" , condition); var result = parser.Parse(); } } \u4e0a\u8a18\u306e\u5834\u5408\u30d1\u30fc\u30b9\u7d50\u679c\u306f\u305d\u308c\u305e\u308c\u4e0b\u8a18\u306e\u3068\u304a\u308a\u3067\u3059","title":"\u5b9f\u884c\u4f8b(\u901a\u5e38)"},{"location":"ja/usage/#sqlparserparse-parsedsql","text":"SELECT t0.BusinessEntityID , t1.FirstName , t1.MiddleName , t1.LastName , t0.BirthDate , t0.MaritalStatus , t0.Gender , t0.HireDate FROM HumanResources.Employee t0 INNER JOIN Person.Person t1 ON t0.BusinessEntityID = t1.BusinessEntityID WHERE t0.BirthDate BETWEEN @ BirthDateFrom AND @ BirthDateTo ORDER BY t0.BusinessEntityID","title":"SqlParser#Parse ParsedSql"},{"location":"ja/usage/#sqlparserparse-debugsql","text":"SELECT t0.BusinessEntityID , t1.FirstName , t1.MiddleName , t1.LastName , t0.BirthDate , t0.MaritalStatus , t0.Gender , t0.HireDate FROM HumanResources.Employee t0 INNER JOIN Person.Person t1 ON t0.BusinessEntityID = t1.BusinessEntityID WHERE t0.BirthDate BETWEEN '1980/01/01 0:00:00' AND '1990/01/01 0:00:00' ORDER BY t0.BusinessEntityID","title":"SqlParser#Parse DebugSql"},{"location":"ja/usage/#sqlparserparse-dbdataparameters","text":"index parameter name parameter value 0 @BirthDateFrom new DateTime(1980, 1, 1) 1 @BirthDateTo new DateTime(1990, 1, 1)","title":"SqlParser#Parse DbDataParameters"},{"location":"ja/usage/#_5","text":"EasySqlParser\u304c\u5185\u90e8\u3067SQL\u30d5\u30a1\u30a4\u30eb\u3092\u66f8\u304d\u63db\u3048\u308b\u3053\u3068\u3067\u30c7\u30fc\u30bf\u53d6\u5f97\u7528\u306eSQL\u6587\u3001\u4ef6\u6570\u53d6\u5f97\u7528\u306eSQL\u6587\u3092\u751f\u6210\u3067\u304d\u307e\u3059 SqlParser#ParsePaginated \u306e\u7d50\u679c\u306f\u4e0b\u8a18\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u6301\u3064\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u3057\u3066\u8fd4\u3055\u308c\u307e\u3059 Result CountResult","title":"\u30da\u30fc\u30b8\u30f3\u30b0"},{"location":"ja/usage/#result","text":"\u30c7\u30fc\u30bf\u53d6\u5f97\u7528\u306e SqlParserResult \u3053\u308c\u306f SqlParserResult \u578b\u3067\u3042\u308a\u3001 SqlParser#Parse \u306e\u7d50\u679c\u3068\u540c\u69d8 ParsedSql \u3001 DebugSql \u3001 DbDataParameters \u3092\u6301\u3063\u3066\u3044\u307e\u3059","title":"Result"},{"location":"ja/usage/#countresult","text":"\u4ef6\u6570\u53d6\u5f97\u7528\u306e SqlParserResult \u30c7\u30fc\u30bf\u53d6\u5f97\u7528\u3068\u540c\u3058\u304f\u3001 ParsedSql \u3001 DebugSql \u3001 DbDataParameters \u3092\u6301\u3063\u3066\u3044\u307e\u3059","title":"CountResult"},{"location":"ja/usage/#_6","text":"SQL\u30d5\u30a1\u30a4\u30eb\u3084\u30d1\u30e9\u30e1\u30fc\u30bf\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u540c\u3058\u306a\u306e\u3067\u7701\u7565 public class Program { static void Main ( string [] args) { ConfigContainer.AddDefault( DbConnectionKind.SqlServer, // DB\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u306e\u7a2e\u985e () => new SqlParameter() // SQL\u30d1\u30e9\u30e1\u30fc\u30bf\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u4f5c\u6210\u306e\u30c7\u30ea\u30b2\u30fc\u30c8 ); ConfigContainer.EnableCache = true ; var condition = new SqlCondition { BirthDateFrom = new DateTime( 1980 , 1 , 1 ), BirthDateTo = new DateTime( 1990 , 1 , 1 ) }; var parser = new SqlParser( \"path/to/SelectEmployees.sql\" , condition); var result = parser.ParsePaginated( 10 , 10 ); // 11\u4ef6\u76ee\u304b\u308920\u4ef6\u76ee\u3092\u53d6\u5f97 } }","title":"\u5b9f\u884c\u4f8b(\u30da\u30fc\u30b8\u30f3\u30b0)"},{"location":"ja/usage/#sqlparserparsepaginated-resultparsedsql","text":"SELECT t0.BusinessEntityID , t1.FirstName , t1.MiddleName , t1.LastName , t0.BirthDate , t0.MaritalStatus , t0.Gender , t0.HireDate FROM HumanResources.Employee t0 INNER JOIN Person.Person t1 ON t0.BusinessEntityID = t1.BusinessEntityID WHERE t0.BirthDate BETWEEN @ BirthDateFrom AND @ BirthDateTo ORDER BY t0.BusinessEntityID offset 10 rows fetch next 10 rows only","title":"SqlParser#ParsePaginated Result.ParsedSql"},{"location":"ja/usage/#sqlparserparsepaginated-resultdebugsql","text":"SELECT t0.BusinessEntityID , t1.FirstName , t1.MiddleName , t1.LastName , t0.BirthDate , t0.MaritalStatus , t0.Gender , t0.HireDate FROM HumanResources.Employee t0 INNER JOIN Person.Person t1 ON t0.BusinessEntityID = t1.BusinessEntityID WHERE t0.BirthDate BETWEEN '1980/01/01 0:00:00' AND '1990/01/01 0:00:00' ORDER BY t0.BusinessEntityID offset 10 rows fetch next 10 rows only","title":"SqlParser#ParsePaginated Result.DebugSql"},{"location":"ja/usage/#sqlparserparsepaginated-countresultparsedsql","text":"select count ( * ) from ( SELECT t0.BusinessEntityID , t1.FirstName , t1.MiddleName , t1.LastName , t0.BirthDate , t0.MaritalStatus , t0.Gender , t0.HireDate FROM HumanResources.Employee t0 INNER JOIN Person.Person t1 ON t0.BusinessEntityID = t1.BusinessEntityID WHERE t0.BirthDate BETWEEN @ BirthDateFrom AND @ BirthDateTo ) t_","title":"SqlParser#ParsePaginated CountResult.ParsedSql"},{"location":"ja/usage/#sqlparserparsepaginated-countresultdebugsql","text":"select count ( * ) from ( SELECT t0.BusinessEntityID , t1.FirstName , t1.MiddleName , t1.LastName , t0.BirthDate , t0.MaritalStatus , t0.Gender , t0.HireDate FROM HumanResources.Employee t0 INNER JOIN Person.Person t1 ON t0.BusinessEntityID = t1.BusinessEntityID WHERE t0.BirthDate BETWEEN '1980/01/01 0:00:00' AND '1990/01/01 0:00:00' ) t_","title":"SqlParser#ParsePaginated CountResult.DebugSql"},{"location":"ja/usage/#row_number","text":"SqlParser#ParsePaginated \u306e rowNumberColumn \u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u4efb\u610f\u306e\u6587\u5b57\u5217\u3092\u4e0e\u3048\u308b\u3068\u3001DB\u63a5\u7d9a\u306e\u7a2e\u985e\u3092\u7121\u8996\u3057\u3066\u5f37\u5236\u7684\u306b ROW_NUMBER \u95a2\u6570\u3092\u4f7f\u3046\u3088\u3046\u306b\u306a\u308a\u307e\u3059 rowNumberColumn \u306f ROW_NUMBER \u95a2\u6570\u306e\u623b\u308a\u5024\u3092\u53d7\u3051\u53d6\u308b\u4eee\u60f3\u5217\u540d\u3067\u3059 View \u5c64\u3067\u884c\u756a\u53f7\u3092\u51fa\u529b\u3059\u308b\u5834\u5408\u306b\u5229\u7528\u3067\u304d\u307e\u3059 Warning DB\u304c ROW_NUMBER \u3092\u5229\u7528\u3067\u304d\u308b\u304b\u3069\u3046\u304b\u78ba\u8a8d\u3057\u305f\u3046\u3048\u3067\u5229\u7528\u3057\u3066\u304f\u3060\u3055\u3044 \u5229\u7528\u53ef\u80fd\u306aDB\u3068\u30d0\u30fc\u30b8\u30e7\u30f3\u306f\u4e0b\u8a18\u306e\u3068\u304a\u308a\u3067\u3059 DB Version SQLServer 2005 Oracle 9i MySQL 8 PostgreSQL 8.4 DB2 9.1 SQLite 3.25","title":"ROW_NUMBER \u306e\u4f7f\u7528"},{"location":"ja/usage/#row_number_1","text":"SQL\u30d5\u30a1\u30a4\u30eb\u3084\u30d1\u30e9\u30e1\u30fc\u30bf\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u540c\u3058\u306a\u306e\u3067\u7701\u7565 public class Program { static void Main ( string [] args) { ConfigContainer.AddDefault( DbConnectionKind.SqlServer, // DB\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u306e\u7a2e\u985e () => new SqlParameter() // SQL\u30d1\u30e9\u30e1\u30fc\u30bf\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u4f5c\u6210\u306e\u30c7\u30ea\u30b2\u30fc\u30c8 ); ConfigContainer.EnableCache = true ; var condition = new SqlCondition { BirthDateFrom = new DateTime( 1980 , 1 , 1 ), BirthDateTo = new DateTime( 1990 , 1 , 1 ) }; var parser = new SqlParser( \"path/to/SelectEmployees.sql\" , condition); var result = parser.ParsePaginated( 10 , 10 , \"LineNo\" ); // 11\u4ef6\u76ee\u304b\u308920\u4ef6\u76ee\u3092\u53d6\u5f97 } }","title":"\u5b9f\u884c\u4f8b(ROW_NUMBER)"},{"location":"ja/usage/#row_number-resultparsedsql","text":"select * from ( select temp_. * , row_number() over( ORDER BY temp_.BusinessEntityID ) as LineNo from ( SELECT t0.BusinessEntityID , t1.FirstName , t1.MiddleName , t1.LastName , t0.BirthDate , t0.MaritalStatus , t0.Gender , t0.HireDate FROM HumanResources.Employee t0 INNER JOIN Person.Person t1 ON t0.BusinessEntityID = t1.BusinessEntityID WHERE t0.BirthDate BETWEEN @ BirthDateFrom AND @ BirthDateTo ) as temp_ ) as temp2_ where LineNo > 10 and LineNo <= 20","title":"ROW_NUMBER Result.ParsedSql"},{"location":"ja/usage/#row_number-resultdebugsql","text":"select * from ( select temp_. * , row_number() over( ORDER BY temp_.BusinessEntityID ) as LineNo from ( SELECT t0.BusinessEntityID , t1.FirstName , t1.MiddleName , t1.LastName , t0.BirthDate , t0.MaritalStatus , t0.Gender , t0.HireDate FROM HumanResources.Employee t0 INNER JOIN Person.Person t1 ON t0.BusinessEntityID = t1.BusinessEntityID WHERE t0.BirthDate BETWEEN '1980/01/01 0:00:00' AND '1990/01/01 0:00:00' ) as temp_ ) as temp2_ where LineNo > 10 and LineNo <= 20","title":"ROW_NUMBER Result.DebugSql"}]}